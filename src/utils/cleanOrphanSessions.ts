
import { supabase } from '@/integrations/supabase/client';
import { logger } from '@/utils/logger';

export const cleanOrphanGameSessions = async () => {
  try {
    logger.info('üßπ Iniciando limpeza de sess√µes √≥rf√£s...');

    // Buscar sess√µes n√£o completadas (√≥rf√£s)
    const { data: orphanSessions, error: fetchError } = await supabase
      .from('game_sessions')
      .select('id, user_id, level, total_score, is_completed')
      .eq('is_completed', false);

    if (fetchError) {
      logger.error('Erro ao buscar sess√µes √≥rf√£s:', fetchError);
      return { success: false, error: fetchError.message };
    }

    if (!orphanSessions || orphanSessions.length === 0) {
      logger.info('‚úÖ Nenhuma sess√£o √≥rf√£ encontrada');
      return { success: true, deletedCount: 0 };
    }

    logger.info(`üóëÔ∏è Encontradas ${orphanSessions.length} sess√µes √≥rf√£s para deletar`);

    // Deletar todas as sess√µes n√£o completadas
    const { error: deleteError } = await supabase
      .from('game_sessions')
      .delete()
      .eq('is_completed', false);

    if (deleteError) {
      logger.error('Erro ao deletar sess√µes √≥rf√£s:', deleteError);
      return { success: false, error: deleteError.message };
    }

    logger.info(`‚úÖ ${orphanSessions.length} sess√µes √≥rf√£s deletadas com sucesso`);

    // Verificar integridade ap√≥s limpeza
    const { data: remainingSessions } = await supabase
      .from('game_sessions')
      .select('id, is_completed')
      .eq('is_completed', false);

    const remainingCount = remainingSessions?.length || 0;
    
    if (remainingCount === 0) {
      logger.info('‚úÖ Limpeza conclu√≠da - nenhuma sess√£o √≥rf√£ restante');
    } else {
      logger.warn(`‚ö†Ô∏è Ainda existem ${remainingCount} sess√µes √≥rf√£s ap√≥s limpeza`);
    }

    return { 
      success: true, 
      deletedCount: orphanSessions.length,
      remainingOrphans: remainingCount 
    };

  } catch (error) {
    logger.error('Erro na limpeza de sess√µes √≥rf√£s:', error);
    return { success: false, error: error instanceof Error ? error.message : 'Erro desconhecido' };
  }
};
