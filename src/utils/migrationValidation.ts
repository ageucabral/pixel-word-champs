
import { logger } from './logger';
import { loggingAuditService } from './loggingAudit';

interface ValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
  migrationReady: boolean;
  blockers: string[];
}

class MigrationValidationService {
  validateMigrationReadiness(): ValidationResult {
    logger.info('Iniciando valida√ß√£o de migra√ß√£o', undefined, 'MIGRATION_VALIDATION');
    
    const errors: string[] = [];
    const warnings: string[] = [];
    const blockers: string[] = [];

    // Verificar se o logger seguro est√° funcionando
    try {
      logger.debug('Teste de valida√ß√£o do logger', undefined, 'MIGRATION_VALIDATION');
    } catch (error) {
      logger.error('Logger seguro n√£o est√° funcionando', { error }, 'MIGRATION_VALIDATION');
      errors.push('Logger seguro n√£o est√° funcionando corretamente');
      blockers.push('LOGGER_NOT_WORKING');
    }

    // Verificar depend√™ncias cr√≠ticas
    const criticalDependencies = [
      'src/utils/logger.ts',
      'src/utils/secureLogger.ts'
    ];

    for (const dep of criticalDependencies) {
      try {
        // Simular verifica√ß√£o de exist√™ncia do arquivo
        logger.debug(`Verificando depend√™ncia: ${dep}`, undefined, 'MIGRATION_VALIDATION');
      } catch {
        logger.error(`Depend√™ncia cr√≠tica n√£o encontrada: ${dep}`, undefined, 'MIGRATION_VALIDATION');
        errors.push(`Depend√™ncia cr√≠tica n√£o encontrada: ${dep}`);
        blockers.push(`MISSING_DEPENDENCY_${dep.replace(/[^a-zA-Z0-9]/g, '_')}`);
      }
    }

    // Verificar se h√° conflitos de import
    const auditReport = loggingAuditService.generateFullReport();
    if (auditReport.logsBySeverity.critical > 0) {
      logger.warn(`Logs cr√≠ticos identificados: ${auditReport.logsBySeverity.critical}`, undefined, 'MIGRATION_VALIDATION');
      warnings.push(`${auditReport.logsBySeverity.critical} logs cr√≠ticos identificados`);
    }

    // Verificar capacidade de migra√ß√£o
    if (auditReport.estimatedMigrationTime > 600) { // Mais de 10 horas
      logger.warn('Migra√ß√£o estimada muito longa', { 
        estimatedTime: auditReport.estimatedMigrationTime 
      }, 'MIGRATION_VALIDATION');
      warnings.push('Migra√ß√£o estimada em mais de 10 horas - considere divis√£o em mais etapas');
    }

    const isValid = errors.length === 0;
    const migrationReady = isValid && blockers.length === 0;

    const result: ValidationResult = {
      isValid,
      errors,
      warnings,
      migrationReady,
      blockers
    };

    logger.info('Valida√ß√£o de migra√ß√£o conclu√≠da', {
      isValid,
      errorsCount: errors.length,
      warningsCount: warnings.length,
      migrationReady
    }, 'MIGRATION_VALIDATION');

    return result;
  }

  printValidationReport(result: ValidationResult): string {
    const status = result.migrationReady ? '‚úÖ APROVADO' : result.isValid ? '‚ö†Ô∏è ATEN√á√ÉO' : '‚ùå REPROVADO';
    
    logger.debug('Gerando relat√≥rio de valida√ß√£o', { 
      status, 
      errorsCount: result.errors.length,
      warningsCount: result.warnings.length 
    }, 'MIGRATION_VALIDATION');
    
    return `
=== RELAT√ìRIO DE VALIDA√á√ÉO DE MIGRA√á√ÉO ===
Status: ${status}

${result.errors.length > 0 ? `üî¥ Erros (${result.errors.length}):
${result.errors.map(error => `  ‚Ä¢ ${error}`).join('\n')}
` : ''}
${result.warnings.length > 0 ? `‚ö†Ô∏è Avisos (${result.warnings.length}):
${result.warnings.map(warning => `  ‚Ä¢ ${warning}`).join('\n')}
` : ''}
${result.blockers.length > 0 ? `üö´ Bloqueadores (${result.blockers.length}):
${result.blockers.map(blocker => `  ‚Ä¢ ${blocker}`).join('\n')}
` : ''}

Pronto para Migra√ß√£o: ${result.migrationReady ? 'SIM' : 'N√ÉO'}
    `.trim();
  }
}

export const migrationValidationService = new MigrationValidationService();
