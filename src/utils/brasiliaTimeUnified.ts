
/**
 * UTILIT√ÅRIO UNIFICADO DE TEMPO - VERS√ÉO CORRIGIDA FINAL
 * REGRA DEFINITIVA: INPUT = EXIBI√á√ÉO (Bras√≠lia), UTC apenas para storage
 * CORRE√á√ÉO: Elimina√ß√£o de convers√µes duplas e l√≥gica inconsistente
 */

/**
 * ===========================================
 * FUN√á√ïES PRINCIPAIS - CORRIGIDAS PARA ELIMINAR CONVERS√ïES DUPLAS
 * ===========================================
 */

/**
 * CORRIGIDO: Converte input Bras√≠lia para UTC SEM convers√£o dupla
 * Input: 15:30 Bras√≠lia ‚Üí Output: 18:30 UTC (mesmo dia)
 * Input: 23:00 Bras√≠lia ‚Üí Output: 02:00 UTC (pr√≥ximo dia)
 */
export const convertBrasiliaInputToUTC = (brasiliaDateTime: string): string => {
  if (!brasiliaDateTime) return new Date().toISOString();
  
  try {
    console.log('üîÑ CONVERS√ÉO BRAS√çLIA ‚Üí UTC (CORRIGIDA):', {
      input: brasiliaDateTime,
      step: 'In√≠cio da convers√£o sem duplica√ß√£o'
    });
    
    // CORRE√á√ÉO: Parsing direto como datetime local (Bras√≠lia)
    const brasiliaDate = new Date(brasiliaDateTime);
    
    // CORRE√á√ÉO: Adicionar apenas 3 horas para UTC (n√£o usar getTime() + offset)
    // Bras√≠lia √© UTC-3, ent√£o para UTC: +3 horas
    const utcDate = new Date(brasiliaDate);
    utcDate.setHours(utcDate.getHours() + 3);
    
    console.log('üåç Convers√£o corrigida:', {
      brasiliaInput: brasiliaDateTime,
      brasiliaHours: brasiliaDate.getHours(),
      utcHours: utcDate.getHours(),
      utcResult: utcDate.toISOString(),
      operation: '+3h (Bras√≠lia ‚Üí UTC)'
    });
    
    return utcDate.toISOString();
  } catch (error) {
    console.error('‚ùå Erro ao converter Bras√≠lia para UTC:', error);
    return new Date().toISOString();
  }
};

/**
 * CORRIGIDO: Converte UTC para formato datetime-local (Bras√≠lia)
 * Input: 18:30 UTC ‚Üí Output: 15:30 Bras√≠lia (para inputs de formul√°rio)
 */
export const formatUTCForDateTimeLocal = (utcDateTime: string): string => {
  if (!utcDateTime) return '';
  
  try {
    const utcDate = new Date(utcDateTime);
    
    // CORRE√á√ÉO: Subtrair 3 horas para converter UTC ‚Üí Bras√≠lia
    const brasiliaDate = new Date(utcDate);
    brasiliaDate.setHours(brasiliaDate.getHours() - 3);
    
    const year = brasiliaDate.getFullYear();
    const month = (brasiliaDate.getMonth() + 1).toString().padStart(2, '0');
    const day = brasiliaDate.getDate().toString().padStart(2, '0');
    const hours = brasiliaDate.getHours().toString().padStart(2, '0');
    const minutes = brasiliaDate.getMinutes().toString().padStart(2, '0');
    
    const result = `${year}-${month}-${day}T${hours}:${minutes}`;
    
    console.log('üîÑ UTC ‚Üí Bras√≠lia (datetime-local):', {
      utcInput: utcDateTime,
      utcHours: utcDate.getHours(),
      brasiliaHours: brasiliaDate.getHours(),
      result: result,
      operation: '-3h (UTC ‚Üí Bras√≠lia)'
    });
    
    return result;
  } catch (error) {
    console.error('‚ùå Erro ao formatar UTC para datetime-local:', error);
    return '';
  }
};

/**
 * CORRIGIDO: Calcula data de fim mantendo l√≥gica em Bras√≠lia sem convers√µes extras
 */
export const calculateEndDateWithDuration = (startDateTimeBrasilia: string, durationHours: number): string => {
  if (!startDateTimeBrasilia || !durationHours) {
    return '';
  }
  
  try {
    console.log('‚è∞ C√ÅLCULO DE FIM (Bras√≠lia - CORRIGIDO):', {
      startInput: startDateTimeBrasilia,
      duration: durationHours
    });
    
    // CORRE√á√ÉO: Trabalhar diretamente em Bras√≠lia, sem convers√µes intermedi√°rias
    const brasiliaStart = new Date(startDateTimeBrasilia);
    
    // Calcular fim em Bras√≠lia
    const brasiliaEnd = new Date(brasiliaStart);
    brasiliaEnd.setHours(brasiliaEnd.getHours() + durationHours);
    
    // Calcular limite do mesmo dia (23:59:59)
    const sameDayLimit = new Date(brasiliaStart);
    sameDayLimit.setHours(23, 59, 59, 999);
    
    console.log('üìä C√°lculo em Bras√≠lia (CORRIGIDO):', {
      start: brasiliaStart.toLocaleString('pt-BR'),
      calculatedEnd: brasiliaEnd.toLocaleString('pt-BR'),
      limit: sameDayLimit.toLocaleString('pt-BR'),
      willLimit: brasiliaEnd > sameDayLimit
    });
    
    // Se ultrapassar o limite, ajustar
    const finalBrasiliaEnd = brasiliaEnd > sameDayLimit ? sameDayLimit : brasiliaEnd;
    
    // CORRE√á√ÉO: Usar fun√ß√£o de convers√£o corrigida
    const finalBrasiliaEndString = finalBrasiliaEnd.getFullYear() + '-' +
      (finalBrasiliaEnd.getMonth() + 1).toString().padStart(2, '0') + '-' +
      finalBrasiliaEnd.getDate().toString().padStart(2, '0') + 'T' +
      finalBrasiliaEnd.getHours().toString().padStart(2, '0') + ':' +
      finalBrasiliaEnd.getMinutes().toString().padStart(2, '0');
    
    const utcResult = convertBrasiliaInputToUTC(finalBrasiliaEndString);
    
    console.log('‚úÖ Resultado final (CORRIGIDO):', {
      brasiliaEnd: finalBrasiliaEndString,
      utcEnd: utcResult,
      conversion: 'Usando fun√ß√£o corrigida'
    });
    
    return utcResult;
  } catch (error) {
    console.error('‚ùå Erro ao calcular data de fim:', error);
    return '';
  }
};

/**
 * CORRIGIDO: Valida√ß√£o em hor√°rio de Bras√≠lia sem convers√µes extras
 */
export const validateCompetitionDuration = (startDateTimeBrasilia: string, durationHours: number): { isValid: boolean; error?: string } => {
  if (!startDateTimeBrasilia) {
    return { isValid: false, error: 'Data de in√≠cio √© obrigat√≥ria' };
  }
  
  if (!durationHours || durationHours < 1) {
    return { isValid: false, error: 'Dura√ß√£o deve ser de pelo menos 1 hora' };
  }
  
  if (durationHours > 12) {
    return { isValid: false, error: 'Dura√ß√£o m√°xima √© de 12 horas' };
  }
  
  try {
    // CORRE√á√ÉO: Trabalhar diretamente em Bras√≠lia
    const startDate = new Date(startDateTimeBrasilia);
    
    if (isNaN(startDate.getTime())) {
      return { isValid: false, error: 'Data de in√≠cio inv√°lida' };
    }
    
    const endDate = new Date(startDate);
    endDate.setHours(endDate.getHours() + durationHours);
    
    // Limite do mesmo dia em Bras√≠lia
    const sameDayLimit = new Date(startDate);
    sameDayLimit.setHours(23, 59, 59, 999);
    
    console.log('üîç Valida√ß√£o (Bras√≠lia - CORRIGIDA):', {
      input: startDateTimeBrasilia,
      startDate: startDate.toLocaleString('pt-BR'),
      endDate: endDate.toLocaleString('pt-BR'),
      sameDayLimit: sameDayLimit.toLocaleString('pt-BR'),
      durationHours,
      isValid: endDate <= sameDayLimit
    });
    
    if (endDate > sameDayLimit) {
      const maxEndTime = new Date(sameDayLimit);
      const maxDurationMs = maxEndTime.getTime() - startDate.getTime();
      const maxDurationHours = Math.floor(maxDurationMs / (60 * 60 * 1000));
      
      return { 
        isValid: false, 
        error: `Dura√ß√£o m√°xima para este hor√°rio √© de ${maxDurationHours} horas (at√© 23:59:59 do mesmo dia)` 
      };
    }
    
    return { isValid: true };
  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o de dura√ß√£o:', error);
    return { isValid: false, error: 'Erro na valida√ß√£o da dura√ß√£o' };
  }
};

/**
 * ===========================================
 * FUN√á√ïES DE EXIBI√á√ÉO - CORRIGIDAS PARA UTC ‚Üí BRAS√çLIA
 * ===========================================
 */

/**
 * CORRIGIDO: Formata hor√°rio UTC para exibi√ß√£o em Bras√≠lia
 */
export const formatTimeForDisplay = (utcDateTime: string): string => {
  if (!utcDateTime) return '';
  
  try {
    const utcDate = new Date(utcDateTime);
    const brasiliaDate = new Date(utcDate);
    brasiliaDate.setHours(brasiliaDate.getHours() - 3); // UTC ‚Üí Bras√≠lia (-3h)
    
    const hours = brasiliaDate.getHours().toString().padStart(2, '0');
    const minutes = brasiliaDate.getMinutes().toString().padStart(2, '0');
    return `${hours}:${minutes}`;
  } catch (error) {
    console.error('Erro ao formatar hor√°rio:', error);
    return '';
  }
};

/**
 * CORRIGIDO: Formata data UTC para exibi√ß√£o em Bras√≠lia
 */
export const formatDateForDisplay = (utcDateTime: string): string => {
  if (!utcDateTime) return 'Data inv√°lida';
  
  try {
    const utcDate = new Date(utcDateTime);
    const brasiliaDate = new Date(utcDate);
    brasiliaDate.setHours(brasiliaDate.getHours() - 3); // UTC ‚Üí Bras√≠lia (-3h)
    
    const day = brasiliaDate.getDate().toString().padStart(2, '0');
    const month = (brasiliaDate.getMonth() + 1).toString().padStart(2, '0');
    const year = brasiliaDate.getFullYear();
    return `${day}/${month}/${year}`;
  } catch (error) {
    console.error('Erro ao formatar data:', error);
    return 'Data inv√°lida';
  }
};

/**
 * ===========================================
 * FUN√á√ïES UNIVERSAIS - CORRIGIDAS PARA COMPATIBILIDADE
 * ===========================================
 */

/**
 * CORRIGIDO: Formatar data UTC para exibi√ß√£o Bras√≠lia
 */
export const formatBrasiliaDate = (date: Date | string | null | undefined, includeTime: boolean = true): string => {
  try {
    if (!date) return 'Data inv√°lida';
    
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    
    // CORRE√á√ÉO: Converter UTC ‚Üí Bras√≠lia (-3h) para exibi√ß√£o
    const brasiliaTime = new Date(dateObj);
    brasiliaTime.setHours(brasiliaTime.getHours() - 3);
    
    const day = brasiliaTime.getDate().toString().padStart(2, '0');
    const month = (brasiliaTime.getMonth() + 1).toString().padStart(2, '0');
    const year = brasiliaTime.getFullYear();
    
    if (!includeTime) {
      return `${day}/${month}/${year}`;
    }
    
    const hours = brasiliaTime.getHours().toString().padStart(2, '0');
    const minutes = brasiliaTime.getMinutes().toString().padStart(2, '0');
    const seconds = brasiliaTime.getSeconds().toString().padStart(2, '0');
    
    return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
  } catch (error) {
    console.error('Erro ao formatar data Bras√≠lia:', error);
    return 'Data inv√°lida';
  }
};

/**
 * Criar timestamp UTC para banco de dados
 */
export const createBrasiliaTimestamp = (date?: Date | string | null): string => {
  if (!date) {
    return new Date().toISOString();
  }
  
  if (typeof date === 'string') {
    return new Date(date).toISOString();
  }
  
  return date.toISOString();
};

/**
 * Obter data/hora atual em Bras√≠lia
 */
export const getCurrentBrasiliaDate = (): Date => {
  return new Date();
};

/**
 * CORRIGIDO: Obter hor√°rio atual formatado para Bras√≠lia
 */
export const getCurrentBrasiliaTime = (): string => {
  const now = new Date();
  // CORRE√á√ÉO: Converter UTC ‚Üí Bras√≠lia (-3h) para exibi√ß√£o
  const brasiliaTime = new Date(now);
  brasiliaTime.setHours(brasiliaTime.getHours() - 3);
  
  const year = brasiliaTime.getFullYear();
  const month = (brasiliaTime.getMonth() + 1).toString().padStart(2, '0');
  const day = brasiliaTime.getDate().toString().padStart(2, '0');
  const hours = brasiliaTime.getHours().toString().padStart(2, '0');
  const minutes = brasiliaTime.getMinutes().toString().padStart(2, '0');
  
  return `${day}/${month}/${year} ${hours}:${minutes}`;
};

/**
 * CORRIGIDO: Formatar data para inputs
 */
export const formatDateInputToDisplay = (dateString: string): string => {
  if (!dateString) return '';
  
  try {
    const date = new Date(dateString);
    // CORRE√á√ÉO: Converter UTC ‚Üí Bras√≠lia (-3h) para exibi√ß√£o
    const brasiliaDate = new Date(date);
    brasiliaDate.setHours(brasiliaDate.getHours() - 3);
    
    const day = brasiliaDate.getDate().toString().padStart(2, '0');
    const month = (brasiliaDate.getMonth() + 1).toString().padStart(2, '0');
    const year = brasiliaDate.getFullYear();
    
    return `${day}/${month}/${year}`;
  } catch (error) {
    console.error('Erro ao formatar data para input:', error);
    return '';
  }
};

/**
 * Preview de per√≠odo semanal
 */
export const formatWeeklyPeriodPreview = (startDate: string, endDate: string): string => {
  if (!startDate || !endDate) return '';
  
  try {
    const start = formatDateInputToDisplay(startDate);
    const end = formatDateInputToDisplay(endDate);
    return `${start} - ${end}`;
  } catch (error) {
    console.error('Erro ao formatar per√≠odo semanal:', error);
    return '';
  }
};

/**
 * Validar range de datas Bras√≠lia
 */
export const validateBrasiliaDateRange = (startDate: string, endDate: string): { isValid: boolean; error?: string } => {
  if (!startDate || !endDate) {
    return { isValid: false, error: 'Datas de in√≠cio e fim s√£o obrigat√≥rias' };
  }
  
  try {
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    if (start >= end) {
      return { isValid: false, error: 'Data de in√≠cio deve ser anterior √† data de fim' };
    }
    
    return { isValid: true };
  } catch (error) {
    return { isValid: false, error: 'Datas inv√°lidas' };
  }
};

/**
 * Calcular tempo restante em milissegundos
 */
export const calculateTimeRemaining = (endDateUTC: string): number => {
  if (!endDateUTC) return 0;
  
  try {
    const now = new Date();
    const end = new Date(endDateUTC);
    const diff = end.getTime() - now.getTime();
    
    return Math.max(0, diff);
  } catch (error) {
    console.error('Erro ao calcular tempo restante:', error);
    return 0;
  }
};

/**
 * Calcular tempo restante formatado
 */
export const calculateTimeRemainingFormatted = (endDateUTC: string): string => {
  if (!endDateUTC) return '';
  
  try {
    const diff = calculateTimeRemaining(endDateUTC);
    
    if (diff <= 0) return 'Finalizado';
    
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    if (hours > 0) {
      return `${hours}h ${minutes}m`;
    }
    
    return `${minutes}m`;
  } catch (error) {
    console.error('Erro ao calcular tempo restante:', error);
    return '';
  }
};

/**
 * ===========================================
 * FUN√á√ïES DE ESTADO - L√ìGICA PURA UTC
 * ===========================================
 */

/**
 * Calcula status da competi√ß√£o baseado em UTC
 */
export const calculateCompetitionStatus = (
  startDateUTC: string, 
  endDateUTC: string
): 'scheduled' | 'active' | 'completed' => {
  const now = new Date();
  const start = new Date(startDateUTC);
  const end = new Date(endDateUTC);

  if (now < start) {
    return 'scheduled';
  } else if (now >= start && now <= end) {
    return 'active';
  } else {
    return 'completed';
  }
};

/**
 * ===========================================
 * COMPATIBILIDADE - MANTER C√ìDIGO EXISTENTE FUNCIONANDO
 * ===========================================
 */

// Manter compatibilidade com c√≥digo existente
export const formatTimePreview = formatTimeForDisplay;
export const formatDatePreview = formatDateForDisplay;
export const isCompetitionActive = (start: string, end: string) => calculateCompetitionStatus(start, end) === 'active';

// Fun√ß√µes espec√≠ficas para competi√ß√µes
export const getCompetitionTimeRemaining = (endDate: string): number => {
  const remaining = calculateTimeRemaining(endDate);
  return Math.max(0, Math.floor(remaining / 1000)); // Retornar em segundos
};

export const getCompetitionTimeRemainingText = (endDate: string): string => {
  return calculateTimeRemainingFormatted(endDate);
};
