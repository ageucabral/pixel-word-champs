
import { useState } from 'react';
import { cleanOrphanGameSessions, validateOrphanPrevention } from '@/utils/cleanOrphanSessions';
import { logger } from '@/utils/logger';

export const useDebugActions = () => {
  const [isChecking, setIsChecking] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [isTesting, setIsTesting] = useState(false);
  const [isValidatingProtection, setIsValidatingProtection] = useState(false);
  const [lastResult, setLastResult] = useState<any>(null);
  const [protectionResult, setProtectionResult] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);

  const handleCheckConsistency = async () => {
    setIsChecking(true);
    setError(null);
    try {
      logger.debug('Funcionalidade de verifica√ß√£o de consist√™ncia removida', undefined, 'RANKING_DEBUG');
      setLastResult({ message: 'Funcionalidade removida - diagn√≥sticos desabilitados' });
    } catch (err) {
      setError('Funcionalidade n√£o dispon√≠vel');
      logger.error('Funcionalidade de diagn√≥stico removida', { error: err }, 'RANKING_DEBUG');
    } finally {
      setIsChecking(false);
    }
  };

  const handleForceUpdate = async () => {
    setIsUpdating(true);
    setError(null);
    try {
      logger.debug('Funcionalidade de atualiza√ß√£o for√ßada removida', undefined, 'RANKING_DEBUG');
      setLastResult({ message: 'Funcionalidade removida - diagn√≥sticos desabilitados' });
    } catch (err: any) {
      setError(`Funcionalidade n√£o dispon√≠vel: ${err.message || 'Erro desconhecido'}`);
      logger.error('Funcionalidade de diagn√≥stico removida', { error: err }, 'RANKING_DEBUG');
    } finally {
      setIsUpdating(false);
    }
  };

  const handleTestFunction = async () => {
    setIsTesting(true);
    setError(null);
    try {
      logger.debug('Funcionalidade de teste removida', undefined, 'RANKING_DEBUG');
      setError('Funcionalidade removida - diagn√≥sticos desabilitados');
    } catch (err: any) {
      setError(`Funcionalidade n√£o dispon√≠vel: ${err.message || 'Erro desconhecido'}`);
      logger.error('Funcionalidade de diagn√≥stico removida', { error: err }, 'RANKING_DEBUG');
    } finally {
      setIsTesting(false);
    }
  };

  const handleValidateProtection = async () => {
    setIsValidatingProtection(true);
    setError(null);
    try {
      logger.debug('üîç Validando sistema de prote√ß√£o contra sess√µes √≥rf√£s', undefined, 'ORPHAN_PROTECTION');
      
      const validation = await validateOrphanPrevention();
      const cleanup = await cleanOrphanGameSessions();
      
      const combinedResult = {
        validation,
        cleanup,
        systemHealth: validation.isProtected && cleanup.triggerWorking !== false ? 'PROTEGIDO' : 'COMPROMETIDO',
        lastCleanupExecuted: new Date().toISOString()
      };
      
      setProtectionResult(combinedResult);
      
      if (!validation.isProtected || cleanup.triggerBypassed) {
        setError('‚ö†Ô∏è Sistema de prote√ß√£o comprometido - sess√µes √≥rf√£s detectadas');
        logger.error('üö® Sistema de prote√ß√£o contra sess√µes √≥rf√£s comprometido', { combinedResult }, 'ORPHAN_PROTECTION');
      } else {
        logger.info('‚úÖ Sistema de prote√ß√£o funcionando corretamente', { combinedResult }, 'ORPHAN_PROTECTION');
      }
      
    } catch (err: any) {
      setError(`Erro na valida√ß√£o: ${err.message || 'Erro desconhecido'}`);
      logger.error('‚ùå Erro ao validar sistema de prote√ß√£o', { error: err }, 'ORPHAN_PROTECTION');
    } finally {
      setIsValidatingProtection(false);
    }
  };

  return {
    isChecking,
    isUpdating,
    isTesting,
    isValidatingProtection,
    lastResult,
    protectionResult,
    error,
    handleCheckConsistency,
    handleForceUpdate,
    handleTestFunction,
    handleValidateProtection
  };
};
