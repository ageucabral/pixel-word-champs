

import { useCallback, useRef } from 'react';
import { type Position } from '@/utils/boardUtils';
import { isLinearPath } from '@/hooks/word-selection/validateLinearPath';
import { logger } from '@/utils/logger';

interface FoundWord {
  word: string;
  positions: Position[];
  points: number;
}

interface UseWordValidationProps {
  boardData?: { board: string[][]; placedWords: any[] };
  levelWords: string[];
  foundWords: FoundWord[];
  onWordFound: (foundWord: FoundWord) => void;
  getPointsForWord: (word: string) => number;
}

export const useWordValidation = ({
  boardData,
  levelWords,
  foundWords,
  onWordFound,
  getPointsForWord
}: UseWordValidationProps) => {

  // CORRE√á√ÉO: Usar useRef ao inv√©s de propriedade da fun√ß√£o
  const isExecutingRef = useRef(false);

  const validateAndConfirmWord = useCallback((selectedPositions: Position[]) => {
    // PROTE√á√ÉO CR√çTICA: Verificar se a fun√ß√£o j√° est√° sendo executada
    if (isExecutingRef.current) {
      logger.warn('üö® DUPLICA√á√ÉO EVITADA - validateAndConfirmWord j√° est√° executando', {
        positions: selectedPositions
      }, 'WORD_VALIDATION');
      return false;
    }

    // Marcar como executando
    isExecutingRef.current = true;

    try {
      // Valida√ß√£o 1: Verificar se h√° posi√ß√µes selecionadas
      if (!selectedPositions || selectedPositions.length < 2) {
        logger.debug('Sele√ß√£o muito pequena para formar uma palavra', { 
          positionsCount: selectedPositions?.length || 0 
        });
        return false;
      }

      // Valida√ß√£o 2: Verificar se a trajet√≥ria √© linear (horizontal, vertical ou diagonal)
      if (!isLinearPath(selectedPositions)) {
        logger.debug('Trajet√≥ria de sele√ß√£o inv√°lida - n√£o √© linear', { 
          positions: selectedPositions 
        });
        return false;
      }

      // Valida√ß√£o 3: Verificar se temos dados do tabuleiro
      if (!boardData?.board) {
        logger.warn('Dados do tabuleiro n√£o dispon√≠veis para valida√ß√£o');
        return false;
      }

      // Extrair a palavra das posi√ß√µes selecionadas
      const word = selectedPositions.map(pos => {
        if (pos.row >= 0 && pos.row < boardData.board.length && 
            pos.col >= 0 && pos.col < boardData.board[pos.row].length) {
          return boardData.board[pos.row][pos.col];
        }
        return '';
      }).join('');

      logger.debug('Palavra extra√≠da da sele√ß√£o', { 
        word, 
        positions: selectedPositions,
        wordLength: word.length 
      });

      // Valida√ß√£o 4: Verificar se a palavra √© v√°lida (est√° na lista de palavras do n√≠vel)
      if (!levelWords.includes(word)) {
        logger.debug('Palavra n√£o encontrada na lista do n√≠vel', { 
          word, 
          availableWords: levelWords 
        });
        return false;
      }

      // Valida√ß√£o 5: PROTE√á√ÉO CR√çTICA - Verificar se a palavra j√° foi encontrada
      const alreadyFound = foundWords.some(fw => fw.word === word);
      if (alreadyFound) {
        logger.warn('üö® DUPLICA√á√ÉO EVITADA - Palavra j√° encontrada anteriormente', { 
          word,
          existingWords: foundWords.map(fw => fw.word)
        });
        return false;
      }

      // Se chegou at√© aqui, a palavra √© v√°lida!
      const points = getPointsForWord(word);
      const foundWord: FoundWord = {
        word,
        positions: selectedPositions,
        points
      };

      logger.info('‚úÖ PALAVRA V√ÅLIDA CONFIRMADA - CHAMANDO onWordFound UMA √öNICA VEZ', { 
        word, 
        points, 
        positionsCount: selectedPositions.length,
        beforeFoundWordsCount: foundWords.length
      });

      // CR√çTICO: Chamar callback para adicionar ao estado do jogo APENAS UMA VEZ
      onWordFound(foundWord);
      
      logger.info('üìù onWordFound executado com sucesso', {
        word,
        points,
        afterCall: 'Palavra deve ser adicionada ao estado'
      });

      return true;

    } finally {
      // Liberar o lock ap√≥s um breve delay para evitar chamadas m√∫ltiplas
      setTimeout(() => {
        isExecutingRef.current = false;
      }, 100);
    }

  }, [boardData, levelWords, foundWords, onWordFound, getPointsForWord]);

  return {
    validateAndConfirmWord
  };
};

