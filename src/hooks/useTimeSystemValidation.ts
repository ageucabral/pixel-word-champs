
import { useState, useEffect } from 'react';
import { 
  convertBrasiliaInputToUTC, 
  formatBrasiliaDate, 
  getCurrentBrasiliaTime,
  formatUTCForDateTimeLocal,
  calculateEndDateWithDuration 
} from '@/utils/brasiliaTimeUnified';

interface ValidationCheck {
  name: string;
  status: 'pass' | 'fail' | 'pending';
  message: string;
  timestamp: string;
}

export const useTimeSystemValidation = () => {
  const [checks, setChecks] = useState<ValidationCheck[]>([]);
  const [isValidating, setIsValidating] = useState(false);
  const [systemHealthy, setSystemHealthy] = useState<boolean | null>(null);

  const runContinuousValidation = async () => {
    setIsValidating(true);
    const newChecks: ValidationCheck[] = [];
    const timestamp = getCurrentBrasiliaTime();

    console.log('üîç VALIDA√á√ÉO FINAL COMPLETA - Iniciando...', { timestamp });

    // Check 1: Convers√£o cr√≠tica 23:00 Bras√≠lia ‚Üí 02:00 UTC (pr√≥ximo dia)
    try {
      const brasiliaTime = '2025-06-26T23:00';
      const utcTime = convertBrasiliaInputToUTC(brasiliaTime);
      const expectedUTC = '2025-06-27T02:00:00.000Z'; // Pr√≥ximo dia!
      
      newChecks.push({
        name: 'Convers√£o Cr√≠tica 23:00 ‚Üí UTC',
        status: utcTime === expectedUTC ? 'pass' : 'fail',
        message: utcTime === expectedUTC 
          ? `‚úÖ CORRETO: ${brasiliaTime} ‚Üí ${utcTime} (pr√≥ximo dia UTC)`
          : `‚ùå ERRO: Esperado ${expectedUTC}, Atual: ${utcTime}`,
        timestamp
      });
    } catch (error) {
      newChecks.push({
        name: 'Convers√£o Cr√≠tica 23:00 ‚Üí UTC',
        status: 'fail',
        message: `‚ùå Erro na convers√£o cr√≠tica: ${error}`,
        timestamp
      });
    }

    // Check 2: Convers√£o meio-dia 15:30 Bras√≠lia ‚Üí 18:30 UTC
    try {
      const brasiliaTime = '2025-06-26T15:30';
      const utcTime = convertBrasiliaInputToUTC(brasiliaTime);
      const expectedUTC = '2025-06-26T18:30:00.000Z';
      
      newChecks.push({
        name: 'Convers√£o Padr√£o 15:30 ‚Üí UTC',
        status: utcTime === expectedUTC ? 'pass' : 'fail',
        message: utcTime === expectedUTC 
          ? `‚úÖ CORRETO: ${brasiliaTime} ‚Üí ${utcTime}`
          : `‚ùå ERRO: Esperado ${expectedUTC}, Atual: ${utcTime}`,
        timestamp
      });
    } catch (error) {
      newChecks.push({
        name: 'Convers√£o Padr√£o 15:30 ‚Üí UTC',
        status: 'fail',
        message: `‚ùå Erro na convers√£o padr√£o: ${error}`,
        timestamp
      });
    }

    // Check 3: Formata√ß√£o UTC ‚Üí Bras√≠lia (reverso)
    try {
      const utcTime = '2025-06-27T02:00:00.000Z'; // 23:00 Bras√≠lia
      const brasiliaDisplay = formatBrasiliaDate(utcTime, true);
      const expectedDisplay = '26/06/2025 23:00:00'; // Mesmo dia Bras√≠lia!
      
      newChecks.push({
        name: 'Formata√ß√£o UTC ‚Üí Bras√≠lia Display',
        status: brasiliaDisplay === expectedDisplay ? 'pass' : 'fail',
        message: brasiliaDisplay === expectedDisplay
          ? `‚úÖ CORRETO: UTC ${utcTime} ‚Üí Bras√≠lia ${brasiliaDisplay}`
          : `‚ùå ERRO: Esperado ${expectedDisplay}, Atual: ${brasiliaDisplay}`,
        timestamp
      });
    } catch (error) {
      newChecks.push({
        name: 'Formata√ß√£o UTC ‚Üí Bras√≠lia Display',
        status: 'fail',
        message: `‚ùå Erro na formata√ß√£o reversa: ${error}`,
        timestamp
      });
    }

    // Check 4: Roundtrip cr√≠tico 23:00
    try {
      const originalInput = '2025-06-26T23:00';
      const toUTC = convertBrasiliaInputToUTC(originalInput);
      const backToBrasilia = formatUTCForDateTimeLocal(toUTC);
      
      newChecks.push({
        name: 'Roundtrip Cr√≠tico 23:00',
        status: originalInput === backToBrasilia ? 'pass' : 'fail',
        message: originalInput === backToBrasilia
          ? `‚úÖ CONSISTENTE: ${originalInput} ‚Üí UTC ‚Üí ${backToBrasilia}`
          : `‚ùå PERDA: ${originalInput} ‚Üí ${backToBrasilia} (via ${toUTC})`,
        timestamp
      });
    } catch (error) {
      newChecks.push({
        name: 'Roundtrip Cr√≠tico 23:00',
        status: 'fail',
        message: `‚ùå Erro no roundtrip cr√≠tico: ${error}`,
        timestamp
      });
    }

    // Check 5: C√°lculo de dura√ß√£o respeitando limite
    try {
      const startTime = '2025-06-26T22:00'; // 22:00
      const duration = 3; // +3h = 01:00 (pr√≥ximo dia)
      const endTimeUTC = calculateEndDateWithDuration(startTime, duration);
      const endTimeBrasilia = formatUTCForDateTimeLocal(endTimeUTC);
      const expectedEnd = '2025-06-26T23:59'; // Deve limitar em 23:59
      
      const isWithinLimit = endTimeBrasilia <= expectedEnd + ':59';
      
      newChecks.push({
        name: 'C√°lculo com Limite de Dia',
        status: isWithinLimit ? 'pass' : 'fail',
        message: isWithinLimit
          ? `‚úÖ LIMITADO: ${startTime} + ${duration}h ‚Üí ${endTimeBrasilia} (respeitou 23:59)`
          : `‚ùå ULTRAPASSOU: ${startTime} + ${duration}h ‚Üí ${endTimeBrasilia}`,
        timestamp
      });
    } catch (error) {
      newChecks.push({
        name: 'C√°lculo com Limite de Dia',
        status: 'fail',
        message: `‚ùå Erro no c√°lculo com limite: ${error}`,
        timestamp
      });
    }

    // Check 6: Hor√°rio atual Bras√≠lia v√°lido
    try {
      const currentTime = getCurrentBrasiliaTime();
      const isValidFormat = /^\d{2}\/\d{2}\/\d{4} \d{2}:\d{2}$/.test(currentTime);
      
      newChecks.push({
        name: 'Hor√°rio Atual Bras√≠lia',
        status: isValidFormat ? 'pass' : 'fail',
        message: isValidFormat
          ? `‚úÖ FORMATO CORRETO: ${currentTime}`
          : `‚ùå FORMATO INV√ÅLIDO: ${currentTime}`,
        timestamp
      });
    } catch (error) {
      newChecks.push({
        name: 'Hor√°rio Atual Bras√≠lia',
        status: 'fail',
        message: `‚ùå Erro ao obter hor√°rio: ${error}`,
        timestamp
      });
    }

    // Check 7: Teste Edge Case - Meia-noite
    try {
      const midnightInput = '2025-06-26T00:00';
      const midnightUTC = convertBrasiliaInputToUTC(midnightInput);
      const expectedMidnightUTC = '2025-06-26T03:00:00.000Z';
      
      newChecks.push({
        name: 'Edge Case - Meia-noite',
        status: midnightUTC === expectedMidnightUTC ? 'pass' : 'fail',
        message: midnightUTC === expectedMidnightUTC
          ? `‚úÖ CORRETO: Meia-noite ${midnightInput} ‚Üí ${midnightUTC}`
          : `‚ùå ERRO: Esperado ${expectedMidnightUTC}, Atual: ${midnightUTC}`,
        timestamp
      });
    } catch (error) {
      newChecks.push({
        name: 'Edge Case - Meia-noite',
        status: 'fail',
        message: `‚ùå Erro no edge case meia-noite: ${error}`,
        timestamp
      });
    }

    setChecks(newChecks);
    
    const passedChecks = newChecks.filter(check => check.status === 'pass').length;
    const totalChecks = newChecks.length;
    const healthy = passedChecks === totalChecks;
    
    setSystemHealthy(healthy);
    setIsValidating(false);

    console.log('üìä VALIDA√á√ÉO FINAL CONCLU√çDA:', {
      timestamp,
      totalChecks,
      passedChecks,
      failedChecks: totalChecks - passedChecks,
      systemHealthy: healthy,
      detailedResults: newChecks.map(c => ({
        test: c.name,
        status: c.status,
        message: c.message
      }))
    });

    return {
      healthy,
      passedChecks,
      totalChecks,
      checks: newChecks
    };
  };

  // Executar valida√ß√£o inicial
  useEffect(() => {
    runContinuousValidation();
  }, []);

  return {
    checks,
    isValidating,
    systemHealthy,
    runValidation: runContinuousValidation
  };
};
