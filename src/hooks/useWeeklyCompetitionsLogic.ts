
import { useState, useMemo } from 'react';
import { useToast } from "@/hooks/use-toast";
import { customCompetitionService } from '@/services/customCompetitionService';
import { competitionStatusService } from '@/services/competitionStatusService';

interface WeeklyCompetition {
  id: string;
  title: string;
  description: string;
  start_date: string;
  end_date: string;
  status: string;
  prize_pool: number;
  max_participants: number;
  total_participants?: number; // Made optional to match other components
}

export const useWeeklyCompetitionsLogic = (competitions: WeeklyCompetition[]) => {
  const { toast } = useToast();
  const [deletingId, setDeletingId] = useState<string | null>(null);

  // Usar o servi√ßo centralizado para calcular o status de cada competi√ß√£o
  const calculateActualStatus = (competition: WeeklyCompetition) => {
    return competitionStatusService.calculateCorrectStatus({
      start_date: competition.start_date,
      end_date: competition.end_date,
      competition_type: 'tournament'
    });
  };

  // Memoizar c√°lculos para evitar rec√°lculos desnecess√°rios
  const processedCompetitions = useMemo(() => {
    console.log('üîç [useWeeklyCompetitionsLogic] Processando competi√ß√µes:', competitions.length);
    
    // Filtrar apenas competi√ß√µes v√°lidas (n√£o canceladas)
    const activeCompetitions = competitions.filter(comp => {
      const actualStatus = calculateActualStatus(comp);
      const shouldShow = actualStatus !== 'cancelled' && comp.status !== 'cancelled';
      
      return shouldShow;
    });

    // Encontrar a competi√ß√£o realmente ativa (dentro do per√≠odo)
    const currentActiveCompetition = activeCompetitions.find(comp => {
      const actualStatus = calculateActualStatus(comp);
      return actualStatus === 'active';
    });

    // Outras competi√ß√µes (aguardando in√≠cio ou finalizadas)
    const otherActiveCompetitions = activeCompetitions.filter(comp => {
      const actualStatus = calculateActualStatus(comp);
      return actualStatus !== 'active' || comp.id !== currentActiveCompetition?.id;
    });

    console.log(`‚úÖ [PROCESSED] Competi√ß√µes processadas:`, {
      total: competitions.length,
      filtered: activeCompetitions.length,
      active: currentActiveCompetition ? 1 : 0,
      others: otherActiveCompetitions.length
    });

    return {
      activeCompetitions,
      currentActiveCompetition,
      otherActiveCompetitions
    };
  }, [competitions]);

  const handleDelete = async (competition: WeeklyCompetition, onRefresh?: () => void) => {
    console.log('üóëÔ∏è Tentando excluir competi√ß√£o:', competition.id);
    
    const confirmDelete = window.confirm(`Tem certeza que deseja excluir a competi√ß√£o "${competition.title}"?`);
    if (!confirmDelete) {
      console.log('‚ùå Exclus√£o cancelada pelo usu√°rio');
      return;
    }

    setDeletingId(competition.id);
    
    try {
      console.log('üì§ Chamando servi√ßo de exclus√£o...');
      const response = await customCompetitionService.deleteCompetition(competition.id);
      
      if (response.success) {
        console.log('‚úÖ Competi√ß√£o exclu√≠da com sucesso');
        toast({
          title: "Competi√ß√£o exclu√≠da",
          description: `A competi√ß√£o "${competition.title}" foi exclu√≠da com sucesso.`,
        });
        
        if (onRefresh) {
          console.log('üîÑ Atualizando lista de competi√ß√µes...');
          onRefresh();
        }
      } else {
        console.error('‚ùå Erro no servi√ßo:', response.error);
        throw new Error(response.error || 'Erro ao excluir competi√ß√£o');
      }
    } catch (error) {
      console.error('‚ùå Erro ao excluir competi√ß√£o:', error);
      toast({
        title: "Erro ao excluir",
        description: error instanceof Error ? error.message : "N√£o foi poss√≠vel excluir a competi√ß√£o. Tente novamente.",
        variant: "destructive",
      });
    } finally {
      setDeletingId(null);
    }
  };

  return {
    ...processedCompetitions,
    deletingId,
    handleDelete,
    calculateActualStatus
  };
};
