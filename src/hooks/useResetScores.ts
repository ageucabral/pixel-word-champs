
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useToast } from "@/hooks/use-toast";
import { supabase } from '@/integrations/supabase/client';

export const useResetScores = () => {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const resetAllScoresMutation = useMutation({
    mutationFn: async (adminPassword: string) => {
      console.log('üîí Iniciando reset de pontua√ß√µes...');
      
      // Verificar senha do admin
      if (adminPassword !== 'admin123') {
        console.error('‚ùå Senha incorreta fornecida');
        throw new Error('Senha de administrador incorreta');
      }

      const { data: currentUser } = await supabase.auth.getUser();
      if (!currentUser.user) {
        console.error('‚ùå Usu√°rio n√£o autenticado');
        throw new Error('Usu√°rio n√£o autenticado');
      }

      console.log('‚úÖ Senha validada, iniciando reset...');

      // Zerar pontua√ß√£o de todos os usu√°rios
      const { error: resetError } = await supabase
        .from('profiles')
        .update({
          total_score: 0,
          games_played: 0,
          best_daily_position: null,
          best_weekly_position: null
        })
        .neq('id', '00000000-0000-0000-0000-000000000000');

      if (resetError) {
        console.error('‚ùå Erro ao resetar pontua√ß√µes:', resetError);
        throw resetError;
      }

      console.log('‚úÖ Pontua√ß√µes resetadas com sucesso');

      // Registrar a√ß√£o administrativa
      const { error: logError } = await supabase
        .from('admin_actions')
        .insert({
          admin_id: currentUser.user.id,
          target_user_id: currentUser.user.id,
          action_type: 'reset_all_scores',
          details: { 
            timestamp: new Date().toISOString(),
            affected_users: 'all'
          }
        });

      if (logError) {
        console.warn('‚ö†Ô∏è Erro ao registrar log da a√ß√£o:', logError);
      }

      console.log('‚úÖ Reset completo realizado com sucesso');
    },
    onSuccess: () => {
      console.log('üéâ Reset de pontua√ß√µes finalizado');
      toast({
        title: "Pontua√ß√µes zeradas",
        description: "A pontua√ß√£o de todos os usu√°rios foi zerada com sucesso.",
      });
      
      // Invalidar todas as queries relacionadas
      queryClient.invalidateQueries({ queryKey: ['allUsers'] });
      queryClient.invalidateQueries({ queryKey: ['realUserStats'] });
      queryClient.invalidateQueries({ queryKey: ['userStats'] });
      queryClient.invalidateQueries({ queryKey: ['rankings'] });
      queryClient.invalidateQueries({ queryKey: ['dailyRanking'] });
      queryClient.invalidateQueries({ queryKey: ['weeklyRanking'] });
    },
    onError: (error: any) => {
      console.error('‚ùå Erro no reset de pontua√ß√µes:', error);
      toast({
        title: "Erro ao zerar pontua√ß√µes",
        description: error.message || "Ocorreu um erro ao tentar zerar as pontua√ß√µes.",
        variant: "destructive",
      });
    },
  });

  return {
    resetAllScores: resetAllScoresMutation.mutate,
    isResettingScores: resetAllScoresMutation.isPending,
  };
};
