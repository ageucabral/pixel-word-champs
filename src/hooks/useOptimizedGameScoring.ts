
import { useState, useCallback } from 'react';
import { useGameSessionManager } from './useGameSessionManager';
import { logger } from '@/utils/logger';

interface FoundWord {
  word: string;
  positions: Array<{row: number, col: number}>;
  points: number;
}

export const useOptimizedGameScoring = (level: number, boardData: any) => {
  const [isUpdatingScore, setIsUpdatingScore] = useState(false);
  const [currentSession, setCurrentSession] = useState<any>(null);
  const { startNewSession, completeSession, resetSession } = useGameSessionManager();
  
  // ETAPA 4: Constante para total de palavras necess√°rias
  const TOTAL_WORDS_REQUIRED = 5;

  // Inicializar sess√£o no banco
  const initializeSession = useCallback(async () => {
    try {
      logger.info('üîÑ Iniciando nova sess√£o de jogo no banco', { level });
      const session = await startNewSession(level);
      if (session) {
        setCurrentSession(session);
        logger.info('‚úÖ Sess√£o inicializada no banco com sucesso', { 
          sessionId: session.sessionId,
          level 
        });
      } else {
        logger.error('‚ùå Falha ao inicializar sess√£o', { level });
      }
    } catch (error) {
      logger.error('‚ùå Erro cr√≠tico ao inicializar sess√£o', { error, level });
    }
  }, [level, startNewSession]);

  // Calcular dados do n√≠vel atual baseado nas palavras encontradas
  const calculateLevelData = useCallback((foundWords: FoundWord[]) => {
    const currentLevelScore = foundWords.reduce((sum, fw) => sum + fw.points, 0);
    const isLevelCompleted = foundWords.length >= TOTAL_WORDS_REQUIRED;

    return { currentLevelScore, isLevelCompleted };
  }, []);

  // ‚úÖ CORRE√á√ÉO: registerLevelCompletion agora retorna Promise e √© n√£o-bloqueante
  const registerLevelCompletion = useCallback(async (foundWords: FoundWord[], timeElapsed: number): Promise<void> => {
    if (isUpdatingScore) {
      logger.warn('‚ö†Ô∏è J√° est√° registrando conclus√£o, ignorando nova tentativa');
      return;
    }

    const { currentLevelScore, isLevelCompleted } = calculateLevelData(foundWords);

    // VALIDA√á√ÉO: Verificar se realmente completou
    if (!isLevelCompleted || foundWords.length < TOTAL_WORDS_REQUIRED) {
      logger.error(`‚ùå VALIDA√á√ÉO FALHOU: Apenas ${foundWords.length} de ${TOTAL_WORDS_REQUIRED} palavras encontradas`);
      await resetSession();
      throw new Error(`Sess√£o inv√°lida: ${foundWords.length} palavras encontradas (m√≠nimo: ${TOTAL_WORDS_REQUIRED})`);
    }

    if (currentLevelScore <= 0) {
      logger.error('‚ùå VALIDA√á√ÉO FALHOU: Pontua√ß√£o zero ou negativa');
      await resetSession();
      throw new Error('Sess√£o inv√°lida: pontua√ß√£o deve ser maior que zero');
    }

    setIsUpdatingScore(true);
    
    try {
      logger.info(`üîÑ Registrando conclus√£o VALIDADA do n√≠vel ${level}: ${foundWords.length} palavras, ${currentLevelScore} pontos`);

      // Verificar se temos uma sess√£o ativa
      if (!currentSession) {
        logger.warn('‚ö†Ô∏è Tentando completar n√≠vel sem sess√£o ativa, criando uma nova...');
        await initializeSession();
      }

      // As palavras j√° foram salvas individualmente no useGameState
      // Agora s√≥ precisamos completar a sess√£o
      const result = await completeSession(timeElapsed);

      if (result) {
        logger.info(`‚úÖ N√≠vel ${level} completado e registrado: ${currentLevelScore} pontos, ${foundWords.length} palavras`);
      } else {
        throw new Error('Falha ao registrar sess√£o no banco de dados');
      }

    } catch (error) {
      logger.error('‚ùå Erro ao registrar conclus√£o do n√≠vel (background):', error);
      // ‚ö° IMPORTANTE: N√£o impedir que o usu√°rio continue jogando
      // Em caso de erro, apenas logar mas n√£o rejeitar a promise
      await resetSession().catch(() => {}); // Tentar limpar, mas n√£o falhar se n√£o conseguir
    } finally {
      setIsUpdatingScore(false);
    }
  }, [level, isUpdatingScore, calculateLevelData, completeSession, resetSession, currentSession, initializeSession]);

  const discardIncompleteLevel = useCallback(async () => {
    logger.info(`üóëÔ∏è Descartando n√≠vel ${level} incompleto - sess√£o n√£o ser√° salva`);
    await resetSession();
    setCurrentSession(null);
  }, [level, resetSession]);

  return {
    TOTAL_WORDS_REQUIRED,
    calculateLevelData,
    registerLevelCompletion,
    discardIncompleteLevel,
    initializeSession,
    isUpdatingScore
  };
};
