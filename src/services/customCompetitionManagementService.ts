import { supabase } from '@/integrations/supabase/client';
import { ApiResponse } from '@/types';
import { createSuccessResponse, createErrorResponse, handleServiceError } from '@/utils/apiHelpers';
import { logger } from '@/utils/logger';

interface CompetitionFormData {
  title: string;
  description: string;
  competition_type: string;
  start_date: string;
  end_date: string;
  max_participants: number;
  prize_pool: number;
  theme?: string;
  rules?: any;
  status?: string;
}

interface CompetitionCreateData {
  title: string;
  description: string;
  competition_type: string;
  start_date: string;
  end_date: string;
  max_participants: number;
  prize_pool: number;
  theme?: string;
  rules?: any;
  status?: string;
}

interface CompetitionFilters {
  status?: string;
  competition_type?: string;
  created_by?: string;
}

interface CompetitionStats {
  totalParticipants: number;
  averageScore: number;
  highestScore: number;
  competition: any;
}

export class CustomCompetitionManagementService {
  /**
   * Verifica se h√° sobreposi√ß√£o de datas APENAS entre competi√ß√µes semanais (excluindo a atual)
   * Competi√ß√µes di√°rias podem coexistir em qualquer data
   */
  private async checkWeeklyCompetitionOverlapForUpdate(competitionId: string, startDate: string, endDate: string): Promise<boolean> {
    try {
      console.log('üîç Verificando sobreposi√ß√£o APENAS entre competi√ß√µes semanais para atualiza√ß√£o (STRINGS PURAS):', { competitionId, startDate, endDate });
      
      const { data: existingWeeklyCompetitions, error } = await supabase
        .from('custom_competitions')
        .select('id, title, start_date, end_date')
        .eq('competition_type', 'tournament') // APENAS competi√ß√µes semanais
        .neq('status', 'completed')
        .neq('id', competitionId); // Excluir a competi√ß√£o atual

      if (error) {
        console.error('‚ùå Erro ao buscar competi√ß√µes semanais existentes:', error);
        throw error;
      }

      if (!existingWeeklyCompetitions || existingWeeklyCompetitions.length === 0) {
        console.log('‚úÖ Nenhuma competi√ß√£o semanal existente encontrada');
        return false;
      }

      // Verificar sobreposi√ß√£o usando compara√ß√£o de strings simples
      for (const competition of existingWeeklyCompetitions) {
        const existingStart = competition.start_date.split('T')[0]; // Apenas data YYYY-MM-DD
        const existingEnd = competition.end_date.split('T')[0];     // Apenas data YYYY-MM-DD
        const newStart = startDate.split('T')[0];                  // Apenas data YYYY-MM-DD
        const newEnd = endDate.split('T')[0];                      // Apenas data YYYY-MM-DD

        // Verificar se h√° sobreposi√ß√£o usando strings simples
        const hasOverlap = newStart <= existingEnd && newEnd >= existingStart;

        if (hasOverlap) {
          console.log('‚ùå Sobreposi√ß√£o detectada entre competi√ß√µes semanais (STRINGS):', {
            existingTitle: competition.title,
            existingPeriod: `${existingStart} - ${existingEnd}`,
            newPeriod: `${newStart} - ${newEnd}`
          });
          return true;
        }
      }

      console.log('‚úÖ Nenhuma sobreposi√ß√£o detectada entre competi√ß√µes semanais');
      return false;
    } catch (error) {
      console.error('‚ùå Erro ao verificar sobreposi√ß√£o:', error);
      throw error;
    }
  }

  async getCompetitionById(competitionId: string): Promise<ApiResponse<any>> {
    try {
      console.log('üîç Buscando competi√ß√£o por ID:', competitionId);
      
      const { data, error } = await supabase
        .from('custom_competitions')
        .select('*')
        .eq('id', competitionId)
        .single();

      if (error) throw error;

      console.log('‚úÖ Competi√ß√£o encontrada:', data.title);
      return createSuccessResponse(data);
    } catch (error) {
      console.error('‚ùå Erro ao buscar competi√ß√£o:', error);
      return createErrorResponse(handleServiceError(error, 'GET_COMPETITION_BY_ID'));
    }
  }

  async updateCompetition(competitionId: string, data: Partial<CompetitionFormData>): Promise<ApiResponse<any>> {
    try {
      console.log('üîß Atualizando competi√ß√£o com STRINGS PURAS (ZERO convers√µes):', competitionId, data);
      
      // CORRE√á√ÉO RADICAL: Usar dados diretamente como strings
      let updateData: any = data;
      
      if (data.competition_type === 'tournament' && data.start_date && data.end_date) {
        console.log('üîç Validando competi√ß√£o semanal com STRINGS PURAS...');
        
        const hasOverlap = await this.checkWeeklyCompetitionOverlapForUpdate(
          competitionId,
          data.start_date,  // STRING PURA - sem convers√µes
          data.end_date     // STRING PURA - sem convers√µes
        );

        if (hasOverlap) {
          throw new Error('As datas desta competi√ß√£o semanal se sobrep√µem a uma competi√ß√£o semanal j√° existente. Por favor, escolha um per√≠odo diferente.');
        }
        
        console.log('‚úÖ Competi√ß√£o semanal - nenhuma sobreposi√ß√£o detectada');
      } else if (data.competition_type === 'challenge') {
        console.log('‚úÖ Competi√ß√£o di√°ria - PODE coexistir com qualquer outra competi√ß√£o');
      } else if (!data.start_date || !data.end_date) {
        console.log('‚úÖ Datas n√£o alteradas - ignorando valida√ß√£o de hor√°rios');
      }
      
      const { data: competition, error } = await supabase
        .from('custom_competitions')
        .update({
          ...updateData, // USAR DADOS COMO STRINGS PURAS
          updated_at: new Date().toISOString()
        })
        .eq('id', competitionId)
        .select()
        .single();

      if (error) throw error;

      console.log('‚úÖ Competi√ß√£o atualizada com STRINGS PURAS preservadas');
      return createSuccessResponse(competition);
    } catch (error) {
      console.error('‚ùå Erro ao atualizar competi√ß√£o:', error);
      return createErrorResponse(handleServiceError(error, 'UPDATE_COMPETITION'));
    }
  }

  async deleteCompetition(competitionId: string): Promise<ApiResponse<boolean>> {
    try {
      console.log('üóëÔ∏è Excluindo competi√ß√£o:', competitionId);
      
      const { error } = await supabase
        .from('custom_competitions')
        .delete()
        .eq('id', competitionId);

      if (error) throw error;

      console.log('‚úÖ Competi√ß√£o exclu√≠da com sucesso');
      return createSuccessResponse(true);
    } catch (error) {
      console.error('‚ùå Erro ao excluir competi√ß√£o:', error);
      return createErrorResponse(handleServiceError(error, 'DELETE_COMPETITION'));
    }
  }

  async createCompetition(data: CompetitionCreateData): Promise<ApiResponse<any>> {
    try {
      logger.info('Criando nova competi√ß√£o', { 
        title: data.title,
        type: data.competition_type,
        hasStartDate: !!data.start_date,
        hasEndDate: !!data.end_date 
      }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');

      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        logger.warn('Tentativa de criar competi√ß√£o sem usu√°rio autenticado', undefined, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');
        return createErrorResponse('Usu√°rio n√£o autenticado');
      }

      const { data: competition, error } = await supabase
        .from('custom_competitions')
        .insert({
          ...data,
          created_by: user.id,
          status: 'scheduled'
        })
        .select()
        .single();

      if (error) {
        logger.error('Erro ao criar competi√ß√£o no banco de dados', { error }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');
        throw error;
      }

      logger.info('Competi√ß√£o criada com sucesso', { 
        competitionId: competition.id,
        title: competition.title 
      }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');

      return createSuccessResponse(competition);
    } catch (error) {
      logger.error('Erro cr√≠tico ao criar competi√ß√£o', { error }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');
      return createErrorResponse(handleServiceError(error, 'CREATE_COMPETITION'));
    }
  }

  async updateCompetition(id: string, data: Partial<CompetitionCreateData>): Promise<ApiResponse<any>> {
    try {
      logger.info('Atualizando competi√ß√£o', { 
        competitionId: id,
        updateFields: Object.keys(data) 
      }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');

      const { data: competition, error } = await supabase
        .from('custom_competitions')
        .update({
          ...data,
          updated_at: new Date().toISOString()
        })
        .eq('id', id)
        .select()
        .single();

      if (error) {
        logger.error('Erro ao atualizar competi√ß√£o no banco de dados', { 
          competitionId: id, 
          error 
        }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');
        throw error;
      }

      logger.info('Competi√ß√£o atualizada com sucesso', { 
        competitionId: id,
        title: competition.title 
      }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');

      return createSuccessResponse(competition);
    } catch (error) {
      logger.error('Erro cr√≠tico ao atualizar competi√ß√£o', { 
        competitionId: id, 
        error 
      }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');
      return createErrorResponse(handleServiceError(error, 'UPDATE_COMPETITION'));
    }
  }

  async deleteCompetition(id: string): Promise<ApiResponse<boolean>> {
    try {
      logger.info('Removendo competi√ß√£o', { competitionId: id }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');

      // Verificar se pode ser removida (n√£o pode ter participantes)
      const { count, error: countError } = await supabase
        .from('competition_participations')
        .select('*', { count: 'exact', head: true })
        .eq('competition_id', id);

      if (countError) {
        logger.error('Erro ao verificar participantes antes da remo√ß√£o', { 
          competitionId: id, 
          error: countError 
        }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');
        throw countError;
      }

      if ((count || 0) > 0) {
        logger.warn('Tentativa de remover competi√ß√£o com participantes', { 
          competitionId: id, 
          participantsCount: count 
        }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');
        return createErrorResponse('N√£o √© poss√≠vel remover competi√ß√£o com participantes');
      }

      const { error } = await supabase
        .from('custom_competitions')
        .delete()
        .eq('id', id);

      if (error) {
        logger.error('Erro ao remover competi√ß√£o no banco de dados', { 
          competitionId: id, 
          error 
        }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');
        throw error;
      }

      logger.info('Competi√ß√£o removida com sucesso', { 
        competitionId: id 
      }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');

      return createSuccessResponse(true);
    } catch (error) {
      logger.error('Erro cr√≠tico ao remover competi√ß√£o', { 
        competitionId: id, 
        error 
      }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');
      return createErrorResponse(handleServiceError(error, 'DELETE_COMPETITION'));
    }
  }

  async getAllCompetitions(filters?: CompetitionFilters): Promise<ApiResponse<any[]>> {
    try {
      logger.debug('Buscando todas as competi√ß√µes', { filters }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');

      let query = supabase.from('custom_competitions').select('*');

      if (filters?.status) {
        query = query.eq('status', filters.status);
      }

      if (filters?.competition_type) {
        query = query.eq('competition_type', filters.competition_type);
      }

      if (filters?.created_by) {
        query = query.eq('created_by', filters.created_by);
      }

      const { data: competitions, error } = await query.order('created_at', { ascending: false });

      if (error) {
        logger.error('Erro ao buscar competi√ß√µes no banco de dados', { 
          filters, 
          error 
        }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');
        throw error;
      }

      logger.debug('Competi√ß√µes carregadas', { 
        count: competitions?.length || 0,
        filters 
      }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');

      return createSuccessResponse(competitions || []);
    } catch (error) {
      logger.error('Erro cr√≠tico ao buscar competi√ß√µes', { 
        filters, 
        error 
      }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');
      return createErrorResponse(handleServiceError(error, 'GET_ALL_COMPETITIONS'));
    }
  }

  async getCompetitionStats(id: string): Promise<ApiResponse<CompetitionStats>> {
    try {
      logger.debug('Calculando estat√≠sticas da competi√ß√£o', { competitionId: id }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');

      // Buscar informa√ß√µes da competi√ß√£o
      const { data: competition, error: compError } = await supabase
        .from('custom_competitions')
        .select('*')
        .eq('id', id)
        .single();

      if (compError) {
        logger.error('Erro ao buscar competi√ß√£o para estat√≠sticas', { 
          competitionId: id, 
          error: compError 
        }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');
        throw compError;
      }

      // Buscar participa√ß√µes
      const { data: participations, error: partError } = await supabase
        .from('competition_participations')
        .select('user_score, joined_at')
        .eq('competition_id', id);

      if (partError) {
        logger.error('Erro ao buscar participa√ß√µes para estat√≠sticas', { 
          competitionId: id, 
          error: partError 
        }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');
        throw partError;
      }

      const totalParticipants = participations?.length || 0;
      const averageScore = totalParticipants > 0 
        ? (participations?.reduce((sum, p) => sum + p.user_score, 0) || 0) / totalParticipants 
        : 0;
      const highestScore = participations?.reduce((max, p) => Math.max(max, p.user_score), 0) || 0;

      const stats: CompetitionStats = {
        totalParticipants,
        averageScore: Math.round(averageScore),
        highestScore,
        competition
      };

      logger.debug('Estat√≠sticas da competi√ß√£o calculadas', { 
        competitionId: id, 
        stats 
      }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');

      return createSuccessResponse(stats);
    } catch (error) {
      logger.error('Erro cr√≠tico ao calcular estat√≠sticas da competi√ß√£o', { 
        competitionId: id, 
        error 
      }, 'CUSTOM_COMPETITION_MANAGEMENT_SERVICE');
      return createErrorResponse(handleServiceError(error, 'GET_COMPETITION_STATS'));
    }
  }
}

export const customCompetitionManagementService = new CustomCompetitionManagementService();

export default customCompetitionManagementService;
