
import { supabase } from '@/integrations/supabase/client';
import { ApiResponse } from '@/types';
import { createSuccessResponse, createErrorResponse, handleServiceError } from '@/utils/apiHelpers';

interface CompetitionFormData {
  title: string;
  description: string;
  competition_type: string;
  start_date: string;
  end_date: string;
  max_participants: number;
  prize_pool: number;
  theme?: string;
  rules?: any;
  status?: string;
}

export class CustomCompetitionManagementService {
  /**
   * Verifica se h√° sobreposi√ß√£o de datas APENAS entre competi√ß√µes semanais (excluindo a atual)
   * Competi√ß√µes di√°rias podem coexistir em qualquer data
   */
  private async checkWeeklyCompetitionOverlapForUpdate(competitionId: string, startDate: string, endDate: string): Promise<boolean> {
    try {
      console.log('üîç Verificando sobreposi√ß√£o APENAS entre competi√ß√µes semanais para atualiza√ß√£o (STRINGS PURAS):', { competitionId, startDate, endDate });
      
      const { data: existingWeeklyCompetitions, error } = await supabase
        .from('custom_competitions')
        .select('id, title, start_date, end_date')
        .eq('competition_type', 'weekly') // APENAS competi√ß√µes semanais
        .neq('status', 'completed')
        .neq('id', competitionId); // Excluir a competi√ß√£o atual

      if (error) {
        console.error('‚ùå Erro ao buscar competi√ß√µes semanais existentes:', error);
        throw error;
      }

      if (!existingWeeklyCompetitions || existingWeeklyCompetitions.length === 0) {
        console.log('‚úÖ Nenhuma competi√ß√£o semanal existente encontrada');
        return false;
      }

      // Verificar sobreposi√ß√£o usando compara√ß√£o de strings simples
      for (const competition of existingWeeklyCompetitions) {
        const existingStart = competition.start_date.split('T')[0]; // Apenas data YYYY-MM-DD
        const existingEnd = competition.end_date.split('T')[0];     // Apenas data YYYY-MM-DD
        const newStart = startDate.split('T')[0];                  // Apenas data YYYY-MM-DD
        const newEnd = endDate.split('T')[0];                      // Apenas data YYYY-MM-DD

        // Verificar se h√° sobreposi√ß√£o usando strings simples
        const hasOverlap = newStart <= existingEnd && newEnd >= existingStart;

        if (hasOverlap) {
          console.log('‚ùå Sobreposi√ß√£o detectada entre competi√ß√µes semanais (STRINGS):', {
            existingTitle: competition.title,
            existingPeriod: `${existingStart} - ${existingEnd}`,
            newPeriod: `${newStart} - ${newEnd}`
          });
          return true;
        }
      }

      console.log('‚úÖ Nenhuma sobreposi√ß√£o detectada entre competi√ß√µes semanais');
      return false;
    } catch (error) {
      console.error('‚ùå Erro ao verificar sobreposi√ß√£o:', error);
      throw error;
    }
  }

  async getCompetitionById(competitionId: string): Promise<ApiResponse<any>> {
    try {
      console.log('üîç Buscando competi√ß√£o por ID:', competitionId);
      
      const { data, error } = await supabase
        .from('custom_competitions')
        .select('*')
        .eq('id', competitionId)
        .single();

      if (error) throw error;

      console.log('‚úÖ Competi√ß√£o encontrada:', data.title);
      return createSuccessResponse(data);
    } catch (error) {
      console.error('‚ùå Erro ao buscar competi√ß√£o:', error);
      return createErrorResponse(handleServiceError(error, 'GET_COMPETITION_BY_ID'));
    }
  }

  async updateCompetition(competitionId: string, data: Partial<CompetitionFormData>): Promise<ApiResponse<any>> {
    try {
      console.log('üîß Atualizando competi√ß√£o com STRINGS PURAS (ZERO convers√µes):', competitionId, data);
      
      // CORRE√á√ÉO RADICAL: Usar dados diretamente como strings
      let updateData: any = data;
      
      if (data.competition_type === 'weekly' && data.start_date && data.end_date) {
        console.log('üîç Validando competi√ß√£o semanal com STRINGS PURAS...');
        
        const hasOverlap = await this.checkWeeklyCompetitionOverlapForUpdate(
          competitionId,
          data.start_date,  // STRING PURA - sem convers√µes
          data.end_date     // STRING PURA - sem convers√µes
        );

        if (hasOverlap) {
          throw new Error('As datas desta competi√ß√£o semanal se sobrep√µem a uma competi√ß√£o semanal j√° existente. Por favor, escolha um per√≠odo diferente.');
        }
        
        console.log('‚úÖ Competi√ß√£o semanal - nenhuma sobreposi√ß√£o detectada');
      } else if (data.competition_type === 'daily') {
        console.log('‚úÖ Competi√ß√£o di√°ria - PODE coexistir com qualquer outra competi√ß√£o');
      } else if (!data.start_date || !data.end_date) {
        console.log('‚úÖ Datas n√£o alteradas - ignorando valida√ß√£o de hor√°rios');
      }
      
      const { data: competition, error } = await supabase
        .from('custom_competitions')
        .update({
          ...updateData, // USAR DADOS COMO STRINGS PURAS
          updated_at: new Date().toISOString()
        })
        .eq('id', competitionId)
        .select()
        .single();

      if (error) throw error;

      console.log('‚úÖ Competi√ß√£o atualizada com sucesso:', competition.title);
      return createSuccessResponse(competition);
    } catch (error) {
      console.error('‚ùå Erro ao atualizar competi√ß√£o:', error);
      return createErrorResponse(handleServiceError(error, 'UPDATE_COMPETITION'));
    }
  }
}

export const customCompetitionManagementService = new CustomCompetitionManagementService();
