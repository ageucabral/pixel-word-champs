import { supabase } from '@/integrations/supabase/client';
import { competitionParticipationService } from './competitionParticipationService';

export class CompetitionAutoParticipationService {
  async joinCompetitionAutomatically(sessionId: string, activeCompetitions: any[]): Promise<void> {
    try {
      console.log('üéØ Verificando participa√ß√£o autom√°tica em competi√ß√µes di√°rias...');
      
      const { data: session, error: sessionError } = await supabase
        .from('game_sessions')
        .select('user_id, competition_id')
        .eq('id', sessionId)
        .single();

      if (sessionError || !session) {
        console.log('‚ùå Sess√£o n√£o encontrada:', sessionError);
        return;
      }

      if (session.competition_id) {
        console.log('‚úÖ Sess√£o j√° vinculada a uma competi√ß√£o');
        return;
      }

      if (activeCompetitions.length === 0) {
        console.log('üìÖ Nenhuma competi√ß√£o di√°ria ativa encontrada');
        return;
      }

      const activeCompetition = activeCompetitions[0];
      const hasParticipated = await competitionParticipationService.checkUserParticipation(session.user_id, activeCompetition.id);
      
      if (hasParticipated) {
        console.log('‚ö†Ô∏è Usu√°rio j√° participou desta competi√ß√£o di√°ria');
        return;
      }

      const { error: updateError } = await supabase
        .from('game_sessions')
        .update({ competition_id: activeCompetition.id })
        .eq('id', sessionId);

      if (updateError) {
        console.error('‚ùå Erro ao vincular sess√£o √† competi√ß√£o:', updateError);
        return;
      }

      await competitionParticipationService.createParticipation(activeCompetition.id, session.user_id);
      console.log('‚úÖ Usu√°rio inscrito automaticamente na competi√ß√£o di√°ria');

    } catch (error) {
      console.error('‚ùå Erro na participa√ß√£o autom√°tica:', error);
    }
  }

  async updateParticipationScore(sessionId: string, totalScore: number): Promise<void> {
    try {
      console.log('üìä Atualizando pontua√ß√£o na competi√ß√£o di√°ria...');
      
      const { data: session, error: sessionError } = await supabase
        .from('game_sessions')
        .select('user_id, competition_id')
        .eq('id', sessionId)
        .single();

      if (sessionError || !session || !session.competition_id) {
        console.log('‚ùå Sess√£o n√£o vinculada a competi√ß√£o di√°ria');
        return;
      }

      // Corrigir chamada - remover o primeiro par√¢metro competition_id
      await competitionParticipationService.updateParticipationScore(sessionId, totalScore);
      console.log('‚úÖ Pontua√ß√£o atualizada na competi√ß√£o di√°ria');
      
      await competitionParticipationService.updateCompetitionRankings(session.competition_id);
    } catch (error) {
      console.error('‚ùå Erro ao atualizar pontua√ß√£o da competi√ß√£o:', error);
    }
  }
}

export const competitionAutoParticipationService = new CompetitionAutoParticipationService();
