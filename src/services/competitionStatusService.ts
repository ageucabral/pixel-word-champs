
import { supabase } from '@/integrations/supabase/client';
import { getBrasiliaTime, isDateInCurrentBrasiliaRange, isBrasiliaDateInFuture } from '@/utils/brasiliaTime';

export class CompetitionStatusService {
  /**
   * Calcula o status correto de uma competi√ß√£o baseado no hor√°rio de Bras√≠lia
   */
  static calculateCorrectStatus(startDate: string, endDate: string): string {
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    if (isDateInCurrentBrasiliaRange(start, end)) {
      return 'active';
    } else if (isBrasiliaDateInFuture(start)) {
      return 'scheduled';
    } else {
      return 'completed';
    }
  }

  /**
   * Atualiza o status de uma competi√ß√£o espec√≠fica
   */
  static async updateSingleCompetitionStatus(competitionId: string): Promise<void> {
    try {
      console.log('üîÑ Atualizando status da competi√ß√£o:', competitionId);
      
      // Buscar dados da competi√ß√£o
      const { data: competition, error: fetchError } = await supabase
        .from('custom_competitions')
        .select('id, start_date, end_date, status, competition_type')
        .eq('id', competitionId)
        .single();

      if (fetchError || !competition) {
        console.error('‚ùå Erro ao buscar competi√ß√£o:', fetchError);
        return;
      }

      // Calcular status correto
      const correctStatus = this.calculateCorrectStatus(competition.start_date, competition.end_date);
      
      // Atualizar apenas se o status mudou
      if (competition.status !== correctStatus) {
        console.log(`üìù Atualizando status de "${competition.status}" para "${correctStatus}"`);
        
        const { error: updateError } = await supabase
          .from('custom_competitions')
          .update({ 
            status: correctStatus,
            updated_at: new Date().toISOString()
          })
          .eq('id', competitionId);

        if (updateError) {
          console.error('‚ùå Erro ao atualizar status:', updateError);
        } else {
          console.log('‚úÖ Status atualizado com sucesso');
        }
      }
    } catch (error) {
      console.error('‚ùå Erro inesperado ao atualizar status:', error);
    }
  }

  /**
   * Atualiza status de todas as competi√ß√µes (semanais e di√°rias)
   */
  static async updateAllCompetitionsStatus(): Promise<void> {
    try {
      console.log('üîÑ Atualizando status de todas as competi√ß√µes...');
      
      // Buscar todas as competi√ß√µes (semanais e di√°rias)
      const { data: competitions, error } = await supabase
        .from('custom_competitions')
        .select('id, start_date, end_date, status, competition_type')
        .in('competition_type', ['tournament', 'challenge']);

      if (error || !competitions) {
        console.error('‚ùå Erro ao buscar competi√ß√µes:', error);
        return;
      }

      console.log(`üìä Verificando ${competitions.length} competi√ß√µes (semanais e di√°rias)`);

      // Atualizar cada competi√ß√£o
      for (const competition of competitions) {
        const correctStatus = this.calculateCorrectStatus(competition.start_date, competition.end_date);
        
        if (competition.status !== correctStatus) {
          console.log(`üîß Competi√ß√£o ${competition.id} (${competition.competition_type}): ${competition.status} ‚Üí ${correctStatus}`);
          await this.updateSingleCompetitionStatus(competition.id);
        }
      }
      
      console.log('‚úÖ Atualiza√ß√£o de status conclu√≠da');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar status das competi√ß√µes:', error);
    }
  }

  /**
   * For√ßa atualiza√ß√£o imediata de todas as competi√ß√µes
   */
  static async forceUpdateAllStatuses(): Promise<void> {
    try {
      console.log('‚ö° For√ßando atualiza√ß√£o imediata de todos os status...');
      await this.updateAllCompetitionsStatus();
      
      // Aguardar um pouco e verificar novamente para garantir
      setTimeout(async () => {
        console.log('üîÑ Segunda verifica√ß√£o de status...');
        await this.updateAllCompetitionsStatus();
      }, 2000);
      
    } catch (error) {
      console.error('‚ùå Erro na atualiza√ß√£o for√ßada:', error);
    }
  }
}
