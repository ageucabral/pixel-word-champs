
import { supabase } from '@/integrations/supabase/client';
import { getBrasiliaTime, createBrasiliaStartOfDay, createBrasiliaEndOfDay, formatBrasiliaTime } from '@/utils/brasiliaTime';

export class CompetitionStatusService {
  /**
   * Calcula o status correto de uma competi√ß√£o di√°ria baseado nas regras espec√≠ficas
   * Competi√ß√µes di√°rias sempre devem ter:
   * - In√≠cio: 00:00:00 do dia
   * - Fim: 23:59:59 do mesmo dia
   * - Status baseado no hor√°rio atual de Bras√≠lia
   */
  static calculateDailyCompetitionStatus(competitionDate: string): string {
    const now = getBrasiliaTime();
    const competitionDay = new Date(competitionDate);
    
    // Criar in√≠cio e fim do dia da competi√ß√£o em Bras√≠lia
    const dayStart = createBrasiliaStartOfDay(competitionDay);
    const dayEnd = createBrasiliaEndOfDay(competitionDay);
    
    console.log('üîç Calculando status da competi√ß√£o di√°ria:', {
      competitionDate,
      now: formatBrasiliaTime(now),
      dayStart: formatBrasiliaTime(dayStart),
      dayEnd: formatBrasiliaTime(dayEnd),
      isBeforeStart: now < dayStart,
      isAfterEnd: now > dayEnd,
      isActive: now >= dayStart && now <= dayEnd
    });
    
    // CORRE√á√ÉO: Usar hor√°rio de Bras√≠lia para compara√ß√£o
    const nowBrasilia = getBrasiliaTime();
    const dayStartBrasilia = new Date(competitionDay);
    dayStartBrasilia.setHours(0, 0, 0, 0);
    
    const dayEndBrasilia = new Date(competitionDay);
    dayEndBrasilia.setHours(23, 59, 59, 999);
    
    console.log('üáßüá∑ Compara√ß√£o em hor√°rio de Bras√≠lia:', {
      nowBrasilia: formatBrasiliaTime(nowBrasilia),
      dayStartBrasilia: formatBrasiliaTime(dayStartBrasilia),
      dayEndBrasilia: formatBrasiliaTime(dayEndBrasilia),
    });
    
    // Regras espec√≠ficas para competi√ß√µes di√°rias em hor√°rio de Bras√≠lia:
    
    // Status: Aguardando - Quando a data/hora atual for anterior a 00:00:00 do dia da competi√ß√£o
    if (nowBrasilia < dayStartBrasilia) {
      console.log('‚è≥ Competi√ß√£o di√°ria est√° AGUARDANDO IN√çCIO (antes de 00:00:00)');
      return 'scheduled';
    } 
    // Status: Ativa - Quando a data/hora atual estiver entre 00:00:00 e 23:59:59 do mesmo dia
    else if (nowBrasilia >= dayStartBrasilia && nowBrasilia <= dayEndBrasilia) {
      console.log('‚úÖ Competi√ß√£o di√°ria est√° ATIVA (00:00:00 √†s 23:59:59)');
      return 'active';
    } 
    // Status: Finalizada - Quando a data/hora atual for posterior a 23:59:59 do mesmo dia
    else {
      console.log('üèÅ Competi√ß√£o di√°ria est√° FINALIZADA (ap√≥s 23:59:59)');
      return 'completed';
    }
  }

  /**
   * Calcula o status correto de uma competi√ß√£o baseado nas datas UTC (para competi√ß√µes semanais)
   */
  static calculateCorrectStatus(startDate: string, endDate: string): string {
    const now = new Date();
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    console.log('üîç Calculando status da competi√ß√£o (formato padr√£o):', {
      now: now.toISOString(),
      start: start.toISOString(), 
      end: end.toISOString(),
      nowTime: now.getTime(),
      startTime: start.getTime(),
      endTime: end.getTime(),
      isBeforeStart: now < start,
      isAfterEnd: now > end,
      isActive: now >= start && now <= end
    });
    
    // Verificar se a competi√ß√£o ainda n√£o come√ßou
    if (now < start) {
      console.log('‚è≥ Competi√ß√£o est√° AGUARDANDO IN√çCIO');
      return 'scheduled';
    } 
    // Verificar se estamos dentro do per√≠odo da competi√ß√£o
    else if (now >= start && now <= end) {
      console.log('‚úÖ Competi√ß√£o est√° ATIVA');
      return 'active';
    } 
    // Competi√ß√£o j√° terminou
    else {
      console.log('üèÅ Competi√ß√£o est√° FINALIZADA');
      return 'completed';
    }
  }

  /**
   * Atualiza o status de uma competi√ß√£o espec√≠fica
   */
  static async updateSingleCompetitionStatus(competitionId: string): Promise<void> {
    try {
      console.log('üîÑ Atualizando status da competi√ß√£o:', competitionId);
      
      // Buscar dados da competi√ß√£o
      const { data: competition, error: fetchError } = await supabase
        .from('custom_competitions')
        .select('id, start_date, end_date, status, competition_type, title')
        .eq('id', competitionId)
        .single();

      if (fetchError || !competition) {
        console.error('‚ùå Erro ao buscar competi√ß√£o:', fetchError);
        return;
      }

      let correctStatus: string;

      // Aplicar regras espec√≠ficas para competi√ß√µes di√°rias
      if (competition.competition_type === 'challenge') {
        console.log('üìÖ Aplicando regras de status para competi√ß√£o DI√ÅRIA');
        correctStatus = this.calculateDailyCompetitionStatus(competition.start_date);
      } else {
        console.log('üìä Aplicando regras de status para competi√ß√£o SEMANAL/PADR√ÉO');
        correctStatus = this.calculateCorrectStatus(competition.start_date, competition.end_date);
      }
      
      // Atualizar apenas se o status mudou
      if (competition.status !== correctStatus) {
        console.log(`üìù Atualizando status de "${competition.status}" para "${correctStatus}" (${competition.title})`);
        
        const { error: updateError } = await supabase
          .from('custom_competitions')
          .update({ 
            status: correctStatus,
            updated_at: new Date().toISOString()
          })
          .eq('id', competitionId);

        if (updateError) {
          console.error('‚ùå Erro ao atualizar status:', updateError);
        } else {
          console.log('‚úÖ Status atualizado com sucesso');
        }
      } else {
        console.log('‚ÑπÔ∏è Status j√° est√° correto:', correctStatus);
      }
    } catch (error) {
      console.error('‚ùå Erro inesperado ao atualizar status:', error);
    }
  }

  /**
   * Atualiza status de todas as competi√ß√µes
   */
  static async updateAllCompetitionsStatus(): Promise<void> {
    try {
      console.log('üîÑ Atualizando status de todas as competi√ß√µes...');
      
      // Buscar todas as competi√ß√µes
      const { data: competitions, error } = await supabase
        .from('custom_competitions')
        .select('id, start_date, end_date, status, title, competition_type');

      if (error || !competitions) {
        console.error('‚ùå Erro ao buscar competi√ß√µes:', error);
        return;
      }

      console.log(`üìã Encontradas ${competitions.length} competi√ß√µes para verificar`);

      // Atualizar cada competi√ß√£o
      for (const competition of competitions) {
        console.log(`üîç Verificando competi√ß√£o: "${competition.title}" (${competition.competition_type})`);
        
        let correctStatus: string;

        // Aplicar regras espec√≠ficas baseadas no tipo
        if (competition.competition_type === 'challenge') {
          correctStatus = this.calculateDailyCompetitionStatus(competition.start_date);
        } else {
          correctStatus = this.calculateCorrectStatus(competition.start_date, competition.end_date);
        }
        
        if (competition.status !== correctStatus) {
          console.log(`üîÑ Necess√°ria atualiza√ß√£o: ${competition.status} ‚Üí ${correctStatus}`);
          await this.updateSingleCompetitionStatus(competition.id);
        } else {
          console.log(`‚úÖ Status j√° correto: ${correctStatus}`);
        }
      }
      
      console.log('‚úÖ Atualiza√ß√£o de status conclu√≠da');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar status das competi√ß√µes:', error);
    }
  }
}
