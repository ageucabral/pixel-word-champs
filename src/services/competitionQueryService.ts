
import { supabase } from '@/integrations/supabase/client';
import { ApiResponse } from '@/types';
import { createSuccessResponse, createErrorResponse, handleServiceError } from '@/utils/apiHelpers';
import { getBrasiliaTime, formatBrasiliaTime, isDateInCurrentBrasiliaRange } from '@/utils/brasiliaTime';

export class CompetitionQueryService {
  async getActiveDailyCompetitions(): Promise<ApiResponse<any[]>> {
    try {
      console.log('üîç Buscando competi√ß√µes di√°rias ativas no banco...');
      
      const brasiliaTime = getBrasiliaTime();
      console.log('üìÖ Data atual de Bras√≠lia:', formatBrasiliaTime(brasiliaTime));

      const { data, error } = await supabase
        .from('custom_competitions')
        .select('*')
        .eq('competition_type', 'challenge')
        .eq('status', 'active');

      console.log('üìä Resposta bruta do banco:', { data, error });

      if (error) {
        console.error('‚ùå Erro na consulta SQL:', error);
        throw error;
      }

      if (!data) {
        console.log('‚ö†Ô∏è Nenhum dado retornado do banco');
        return createSuccessResponse([]);
      }

      console.log(`üìä Total de competi√ß√µes challenge ativas encontradas: ${data.length}`);
      
      // Filtrar competi√ß√µes que est√£o realmente ativas no hor√°rio de Bras√≠lia
      const activeCompetitions = data.filter(comp => {
        const startDate = new Date(comp.start_date);
        const endDate = new Date(comp.end_date);
        const isActive = isDateInCurrentBrasiliaRange(startDate, endDate);
        
        console.log(`üìã Competi√ß√£o "${comp.title}":`, {
          id: comp.id,
          start: formatBrasiliaTime(startDate),
          end: formatBrasiliaTime(endDate),
          isActive
        });
        
        return isActive;
      });

      console.log(`‚úÖ Competi√ß√µes realmente ativas: ${activeCompetitions.length}`);
      return createSuccessResponse(activeCompetitions);
    } catch (error) {
      console.error('‚ùå Erro ao buscar competi√ß√µes di√°rias ativas:', error);
      return createErrorResponse(handleServiceError(error, 'GET_ACTIVE_DAILY_COMPETITIONS'));
    }
  }

  async getDailyCompetitionRanking(competitionId: string): Promise<ApiResponse<any[]>> {
    try {
      console.log('üìä Buscando ranking da competi√ß√£o di√°ria:', competitionId);
      
      if (!competitionId) {
        console.error('‚ùå ID da competi√ß√£o n√£o fornecido');
        return createErrorResponse('ID da competi√ß√£o √© obrigat√≥rio');
      }

      // Buscar participa√ß√µes primeiro
      const { data: participations, error: participationsError } = await supabase
        .from('competition_participations')
        .select('user_position, user_score, user_id, created_at')
        .eq('competition_id', competitionId)
        .not('user_position', 'is', null)
        .order('user_position', { ascending: true })
        .limit(100);

      if (participationsError) {
        console.error('‚ùå Erro ao buscar participa√ß√µes:', participationsError);
        throw participationsError;
      }

      if (!participations || participations.length === 0) {
        console.log('üìä Nenhuma participa√ß√£o encontrada para a competi√ß√£o');
        return createSuccessResponse([]);
      }

      // Buscar perfis dos usu√°rios
      const userIds = participations.map(p => p.user_id);
      const { data: profiles, error: profilesError } = await supabase
        .from('profiles')
        .select('id, username, avatar_url')
        .in('id', userIds);

      if (profilesError) {
        console.error('‚ùå Erro ao buscar perfis:', profilesError);
        throw profilesError;
      }

      // Combinar dados
      const rankingData = participations.map(participation => {
        const profile = profiles?.find(p => p.id === participation.user_id);
        return {
          ...participation,
          profiles: profile ? {
            username: profile.username,
            avatar_url: profile.avatar_url
          } : null
        };
      });

      console.log('‚úÖ Ranking da competi√ß√£o di√°ria carregado:', rankingData.length);
      return createSuccessResponse(rankingData);
    } catch (error) {
      console.error('‚ùå Erro ao carregar ranking:', error);
      return createErrorResponse(handleServiceError(error, 'GET_DAILY_COMPETITION_RANKING'));
    }
  }
}

export const competitionQueryService = new CompetitionQueryService();
