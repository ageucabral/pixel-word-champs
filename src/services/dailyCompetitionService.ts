
import { supabase } from '@/integrations/supabase/client';
import { ApiResponse } from '@/types';
import { createSuccessResponse, createErrorResponse, handleServiceError } from '@/utils/apiHelpers';

interface DailyCompetitionParticipation {
  id: string;
  competition_id: string;
  user_id: string;
  user_score: number;
  user_position: number;
  created_at: string;
}

class DailyCompetitionService {
  async getActiveDailyCompetitions(): Promise<ApiResponse<any[]>> {
    try {
      console.log('üîç Buscando competi√ß√µes di√°rias ativas...');
      
      const today = new Date();
      const todayStr = today.toISOString().split('T')[0];
      
      const { data, error } = await supabase
        .from('custom_competitions')
        .select('*')
        .eq('competition_type', 'challenge')
        .eq('status', 'active')
        .gte('end_date', `${todayStr}T00:00:00`)
        .lte('start_date', `${todayStr}T23:59:59`);

      if (error) throw error;

      console.log('‚úÖ Competi√ß√µes di√°rias ativas encontradas:', data?.length || 0);
      return createSuccessResponse(data || []);
    } catch (error) {
      console.error('‚ùå Erro ao buscar competi√ß√µes di√°rias ativas:', error);
      return createErrorResponse(handleServiceError(error, 'GET_ACTIVE_DAILY_COMPETITIONS'));
    }
  }

  async joinCompetitionAutomatically(sessionId: string): Promise<void> {
    try {
      console.log('üéØ Verificando participa√ß√£o autom√°tica em competi√ß√µes di√°rias...');
      
      // Buscar a sess√£o de jogo
      const { data: session, error: sessionError } = await supabase
        .from('game_sessions')
        .select('user_id, competition_id')
        .eq('id', sessionId)
        .single();

      if (sessionError || !session) {
        console.log('‚ùå Sess√£o n√£o encontrada:', sessionError);
        return;
      }

      // Se j√° tem competition_id, n√£o fazer nada
      if (session.competition_id) {
        console.log('‚úÖ Sess√£o j√° vinculada a uma competi√ß√£o');
        return;
      }

      // Buscar competi√ß√£o di√°ria ativa
      const activeCompetitionsResponse = await this.getActiveDailyCompetitions();
      if (!activeCompetitionsResponse.success || activeCompetitionsResponse.data.length === 0) {
        console.log('üìÖ Nenhuma competi√ß√£o di√°ria ativa encontrada');
        return;
      }

      const activeCompetition = activeCompetitionsResponse.data[0]; // Primeira competi√ß√£o ativa

      // Atualizar a sess√£o com a competi√ß√£o
      const { error: updateError } = await supabase
        .from('game_sessions')
        .update({ competition_id: activeCompetition.id })
        .eq('id', sessionId);

      if (updateError) {
        console.error('‚ùå Erro ao vincular sess√£o √† competi√ß√£o:', updateError);
        return;
      }

      // Verificar se o usu√°rio j√° participa da competi√ß√£o
      const { data: existingParticipation, error: checkError } = await supabase
        .from('competition_participations')
        .select('id')
        .eq('competition_id', activeCompetition.id)
        .eq('user_id', session.user_id)
        .single();

      if (checkError && checkError.code !== 'PGRST116') {
        console.error('‚ùå Erro ao verificar participa√ß√£o:', checkError);
        return;
      }

      // Se n√£o participa ainda, criar participa√ß√£o
      if (!existingParticipation) {
        const { error: participationError } = await supabase
          .from('competition_participations')
          .insert({
            competition_id: activeCompetition.id,
            user_id: session.user_id,
            user_score: 0,
            user_position: null,
            payment_status: 'not_eligible' // Competi√ß√µes di√°rias n√£o t√™m premia√ß√£o
          });

        if (participationError) {
          console.error('‚ùå Erro ao criar participa√ß√£o:', participationError);
          return;
        }

        console.log('‚úÖ Usu√°rio inscrito automaticamente na competi√ß√£o di√°ria');
      }

    } catch (error) {
      console.error('‚ùå Erro na participa√ß√£o autom√°tica:', error);
    }
  }

  async updateParticipationScore(sessionId: string, totalScore: number): Promise<void> {
    try {
      console.log('üìä Atualizando pontua√ß√£o na competi√ß√£o di√°ria...');
      
      // Buscar a sess√£o para obter user_id e competition_id
      const { data: session, error: sessionError } = await supabase
        .from('game_sessions')
        .select('user_id, competition_id')
        .eq('id', sessionId)
        .single();

      if (sessionError || !session || !session.competition_id) {
        console.log('‚ùå Sess√£o n√£o vinculada a competi√ß√£o di√°ria');
        return;
      }

      // Atualizar a pontua√ß√£o na participa√ß√£o
      const { error: updateError } = await supabase
        .from('competition_participations')
        .update({ user_score: totalScore })
        .eq('competition_id', session.competition_id)
        .eq('user_id', session.user_id);

      if (updateError) {
        console.error('‚ùå Erro ao atualizar pontua√ß√£o:', updateError);
        return;
      }

      console.log('‚úÖ Pontua√ß√£o atualizada na competi√ß√£o di√°ria');
      
      // Atualizar rankings
      await this.updateCompetitionRankings(session.competition_id);
    } catch (error) {
      console.error('‚ùå Erro ao atualizar pontua√ß√£o da competi√ß√£o:', error);
    }
  }

  async updateCompetitionRankings(competitionId: string): Promise<void> {
    try {
      console.log('üèÜ Atualizando rankings da competi√ß√£o di√°ria...');
      
      // Buscar todas as participa√ß√µes ordenadas por pontua√ß√£o
      const { data: participations, error } = await supabase
        .from('competition_participations')
        .select('id, user_id, user_score')
        .eq('competition_id', competitionId)
        .order('user_score', { ascending: false });

      if (error) {
        console.error('‚ùå Erro ao buscar participa√ß√µes:', error);
        return;
      }

      // Atualizar posi√ß√µes
      const updates = participations?.map((participation, index) => ({
        id: participation.id,
        user_position: index + 1
      })) || [];

      for (const update of updates) {
        await supabase
          .from('competition_participations')
          .update({ user_position: update.user_position })
          .eq('id', update.id);
      }

      console.log('‚úÖ Rankings da competi√ß√£o di√°ria atualizados');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar rankings:', error);
    }
  }

  async getDailyCompetitionRanking(competitionId: string): Promise<ApiResponse<any[]>> {
    try {
      console.log('üìä Buscando ranking da competi√ß√£o di√°ria...');
      
      const { data, error } = await supabase
        .from('competition_participations')
        .select(`
          user_position,
          user_score,
          user_id,
          created_at,
          profiles!inner(username, avatar_url)
        `)
        .eq('competition_id', competitionId)
        .order('user_position', { ascending: true })
        .limit(100);

      if (error) throw error;

      console.log('‚úÖ Ranking da competi√ß√£o di√°ria carregado:', data?.length || 0);
      return createSuccessResponse(data || []);
    } catch (error) {
      console.error('‚ùå Erro ao carregar ranking:', error);
      return createErrorResponse(handleServiceError(error, 'GET_DAILY_COMPETITION_RANKING'));
    }
  }
}

export const dailyCompetitionService = new DailyCompetitionService();
