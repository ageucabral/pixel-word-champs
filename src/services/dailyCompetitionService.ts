import { supabase } from '@/integrations/supabase/client';
import { ApiResponse } from '@/types';
import { createSuccessResponse, createErrorResponse, handleServiceError } from '@/utils/apiHelpers';
import { getBrasiliaTime } from '@/utils/brasiliaTime';

interface DailyCompetitionParticipation {
  id: string;
  competition_id: string;
  user_id: string;
  user_score: number;
  user_position: number;
  created_at: string;
}

class DailyCompetitionService {
  async getActiveDailyCompetitions(): Promise<ApiResponse<any[]>> {
    try {
      console.log('üîç Buscando competi√ß√µes di√°rias ativas no banco...');
      
      const brasiliaTime = getBrasiliaTime();
      
      console.log('üìÖ Data atual de Bras√≠lia:', brasiliaTime.toISOString());

      // Buscar competi√ß√µes do tipo 'challenge' que est√£o ativas
      const { data, error } = await supabase
        .from('custom_competitions')
        .select('*')
        .eq('competition_type', 'challenge')
        .eq('status', 'active');

      console.log('üìä Resposta bruta do banco:', { data, error });

      if (error) {
        console.error('‚ùå Erro na consulta SQL:', error);
        throw error;
      }

      if (!data) {
        console.log('‚ö†Ô∏è Nenhum dado retornado do banco');
        return createSuccessResponse([]);
      }

      console.log(`üìä Total de competi√ß√µes challenge ativas encontradas: ${data.length}`);
      
      // Log detalhado de cada competi√ß√£o
      data.forEach((comp, index) => {
        console.log(`üìã Competi√ß√£o ${index + 1}:`, {
          id: comp.id,
          title: comp.title,
          type: comp.competition_type,
          status: comp.status,
          start_date: comp.start_date,
          end_date: comp.end_date
        });
      });

      // Filtrar competi√ß√µes que est√£o dentro do per√≠odo ativo
      // Usar diretamente as datas UTC do banco para compara√ß√£o
      const activeCompetitions = data.filter(comp => {
        const startDate = new Date(comp.start_date);
        const endDate = new Date(comp.end_date);
        const now = new Date(); // Usar UTC diretamente
        
        const isActive = now >= startDate && now <= endDate;
        
        console.log(`üîç Verificando competi√ß√£o "${comp.title}":`, {
          id: comp.id,
          start: startDate.toISOString(),
          end: endDate.toISOString(),
          now: now.toISOString(),
          isActive: isActive,
          startTime: startDate.getTime(),
          endTime: endDate.getTime(),
          currentTime: now.getTime()
        });
        
        return isActive;
      });
      
      console.log('‚úÖ Competi√ß√µes ativas ap√≥s filtro de data:', activeCompetitions.length);
      
      if (activeCompetitions.length > 0) {
        activeCompetitions.forEach((comp, index) => {
          console.log(`üéØ Competi√ß√£o ativa ${index + 1}:`, {
            id: comp.id,
            title: comp.title,
            description: comp.description,
            theme: comp.theme,
            start_date: comp.start_date,
            end_date: comp.end_date,
            max_participants: comp.max_participants
          });
        });
      } else {
        console.log('üìÖ Nenhuma competi√ß√£o ativa encontrada no per√≠odo atual');
        
        // Log adicional para debug: mostrar todas as competi√ß√µes e suas datas
        if (data.length > 0) {
          console.log('üîç Debug - Todas as competi√ß√µes challenge encontradas:');
          data.forEach(comp => {
            const startDate = new Date(comp.start_date);
            const endDate = new Date(comp.end_date);
            const now = new Date();
            
            console.log(`- ${comp.title}:`);
            console.log(`  In√≠cio: ${startDate.toISOString()}`);
            console.log(`  Fim: ${endDate.toISOString()}`);
            console.log(`  Agora: ${now.toISOString()}`);
            console.log(`  Timestamps - Start: ${startDate.getTime()}, End: ${endDate.getTime()}, Current: ${now.getTime()}`);
            console.log(`  Come√ßou: ${now >= startDate}, N√£o terminou: ${now <= endDate}`);
          });
        }
      }
      
      return createSuccessResponse(activeCompetitions);
    } catch (error) {
      console.error('‚ùå Erro ao buscar competi√ß√µes di√°rias ativas:', error);
      return createErrorResponse(handleServiceError(error, 'GET_ACTIVE_DAILY_COMPETITIONS'));
    }
  }

  async checkUserParticipation(userId: string, competitionId: string): Promise<boolean> {
    try {
      const { data, error } = await supabase
        .from('competition_participations')
        .select('id')
        .eq('competition_id', competitionId)
        .eq('user_id', userId)
        .single();

      if (error && error.code !== 'PGRST116') {
        console.error('‚ùå Erro ao verificar participa√ß√£o:', error);
        return false;
      }

      return !!data;
    } catch (error) {
      console.error('‚ùå Erro ao verificar participa√ß√£o:', error);
      return false;
    }
  }

  async joinCompetitionAutomatically(sessionId: string): Promise<void> {
    try {
      console.log('üéØ Verificando participa√ß√£o autom√°tica em competi√ß√µes di√°rias...');
      
      // Buscar a sess√£o de jogo
      const { data: session, error: sessionError } = await supabase
        .from('game_sessions')
        .select('user_id, competition_id')
        .eq('id', sessionId)
        .single();

      if (sessionError || !session) {
        console.log('‚ùå Sess√£o n√£o encontrada:', sessionError);
        return;
      }

      // Se j√° tem competition_id, n√£o fazer nada
      if (session.competition_id) {
        console.log('‚úÖ Sess√£o j√° vinculada a uma competi√ß√£o');
        return;
      }

      // Buscar competi√ß√£o di√°ria ativa
      const activeCompetitionsResponse = await this.getActiveDailyCompetitions();
      if (!activeCompetitionsResponse.success || activeCompetitionsResponse.data.length === 0) {
        console.log('üìÖ Nenhuma competi√ß√£o di√°ria ativa encontrada');
        return;
      }

      const activeCompetition = activeCompetitionsResponse.data[0];

      // Verificar se o usu√°rio j√° participou desta competi√ß√£o
      const hasParticipated = await this.checkUserParticipation(session.user_id, activeCompetition.id);
      if (hasParticipated) {
        console.log('‚ö†Ô∏è Usu√°rio j√° participou desta competi√ß√£o di√°ria');
        return;
      }

      // Atualizar a sess√£o com a competi√ß√£o
      const { error: updateError } = await supabase
        .from('game_sessions')
        .update({ competition_id: activeCompetition.id })
        .eq('id', sessionId);

      if (updateError) {
        console.error('‚ùå Erro ao vincular sess√£o √† competi√ß√£o:', updateError);
        return;
      }

      // Criar participa√ß√£o
      const { error: participationError } = await supabase
        .from('competition_participations')
        .insert({
          competition_id: activeCompetition.id,
          user_id: session.user_id,
          user_score: 0,
          user_position: null,
          payment_status: 'not_eligible'
        });

      if (participationError) {
        console.error('‚ùå Erro ao criar participa√ß√£o:', participationError);
        return;
      }

      console.log('‚úÖ Usu√°rio inscrito automaticamente na competi√ß√£o di√°ria');

    } catch (error) {
      console.error('‚ùå Erro na participa√ß√£o autom√°tica:', error);
    }
  }

  async updateParticipationScore(sessionId: string, totalScore: number): Promise<void> {
    try {
      console.log('üìä Atualizando pontua√ß√£o na competi√ß√£o di√°ria...');
      
      // Buscar a sess√£o para obter user_id e competition_id
      const { data: session, error: sessionError } = await supabase
        .from('game_sessions')
        .select('user_id, competition_id')
        .eq('id', sessionId)
        .single();

      if (sessionError || !session || !session.competition_id) {
        console.log('‚ùå Sess√£o n√£o vinculada a competi√ß√£o di√°ria');
        return;
      }

      // Atualizar a pontua√ß√£o na participa√ß√£o
      const { error: updateError } = await supabase
        .from('competition_participations')
        .update({ user_score: totalScore })
        .eq('competition_id', session.competition_id)
        .eq('user_id', session.user_id);

      if (updateError) {
        console.error('‚ùå Erro ao atualizar pontua√ß√£o:', updateError);
        return;
      }

      console.log('‚úÖ Pontua√ß√£o atualizada na competi√ß√£o di√°ria');
      
      // Atualizar rankings
      await this.updateCompetitionRankings(session.competition_id);
    } catch (error) {
      console.error('‚ùå Erro ao atualizar pontua√ß√£o da competi√ß√£o:', error);
    }
  }

  async updateCompetitionRankings(competitionId: string): Promise<void> {
    try {
      console.log('üèÜ Atualizando rankings da competi√ß√£o di√°ria...');
      
      // Buscar todas as participa√ß√µes ordenadas por pontua√ß√£o
      const { data: participations, error } = await supabase
        .from('competition_participations')
        .select('id, user_id, user_score')
        .eq('competition_id', competitionId)
        .order('user_score', { ascending: false });

      if (error) {
        console.error('‚ùå Erro ao buscar participa√ß√µes:', error);
        return;
      }

      // Atualizar posi√ß√µes
      const updates = participations?.map((participation, index) => ({
        id: participation.id,
        user_position: index + 1
      })) || [];

      for (const update of updates) {
        await supabase
          .from('competition_participations')
          .update({ user_position: update.user_position })
          .eq('id', update.id);
      }

      console.log('‚úÖ Rankings da competi√ß√£o di√°ria atualizados');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar rankings:', error);
    }
  }

  async finalizeDailyCompetition(competitionId: string): Promise<void> {
    try {
      console.log('üèÅ Finalizando competi√ß√£o di√°ria e transferindo pontos...');

      // Buscar a competi√ß√£o di√°ria
      const { data: competition, error: compError } = await supabase
        .from('custom_competitions')
        .select('*')
        .eq('id', competitionId)
        .single();

      if (compError || !competition) {
        console.error('‚ùå Competi√ß√£o n√£o encontrada:', compError);
        return;
      }

      // Buscar competi√ß√£o semanal ativa
      const { data: weeklyCompetition, error: weeklyError } = await supabase
        .from('custom_competitions')
        .select('id')
        .eq('competition_type', 'tournament')
        .eq('status', 'active')
        .single();

      if (weeklyError || !weeklyCompetition) {
        console.log('‚ö†Ô∏è Nenhuma competi√ß√£o semanal ativa encontrada para transferir pontos');
      }

      // Buscar todas as participa√ß√µes da competi√ß√£o di√°ria
      const { data: participations, error: partError } = await supabase
        .from('competition_participations')
        .select('user_id, user_score')
        .eq('competition_id', competitionId)
        .gt('user_score', 0);

      if (partError) {
        console.error('‚ùå Erro ao buscar participa√ß√µes:', partError);
        return;
      }

      // Transferir pontos para a competi√ß√£o semanal se existir
      if (weeklyCompetition && participations && participations.length > 0) {
        for (const participation of participations) {
          // Verificar se o usu√°rio j√° participa da competi√ß√£o semanal
          const { data: existingWeeklyParticipation, error: checkError } = await supabase
            .from('competition_participations')
            .select('id, user_score')
            .eq('competition_id', weeklyCompetition.id)
            .eq('user_id', participation.user_id)
            .single();

          if (checkError && checkError.code !== 'PGRST116') {
            console.error('‚ùå Erro ao verificar participa√ß√£o semanal:', checkError);
            continue;
          }

          if (existingWeeklyParticipation) {
            // Somar pontos √† participa√ß√£o existente
            const newScore = existingWeeklyParticipation.user_score + participation.user_score;
            await supabase
              .from('competition_participations')
              .update({ user_score: newScore })
              .eq('id', existingWeeklyParticipation.id);
          } else {
            // Criar nova participa√ß√£o na competi√ß√£o semanal
            await supabase
              .from('competition_participations')
              .insert({
                competition_id: weeklyCompetition.id,
                user_id: participation.user_id,
                user_score: participation.user_score,
                user_position: null,
                payment_status: 'pending'
              });
          }

          console.log(`‚úÖ Pontos transferidos para usu√°rio ${participation.user_id}: ${participation.user_score} pontos`);
        }

        // Atualizar rankings da competi√ß√£o semanal
        await this.updateCompetitionRankings(weeklyCompetition.id);
      }

      // Zerar pontos da competi√ß√£o di√°ria
      await supabase
        .from('competition_participations')
        .update({ user_score: 0 })
        .eq('competition_id', competitionId);

      // Marcar competi√ß√£o como finalizada
      await supabase
        .from('custom_competitions')
        .update({ status: 'completed' })
        .eq('id', competitionId);

      console.log('‚úÖ Competi√ß√£o di√°ria finalizada e pontos transferidos');
    } catch (error) {
      console.error('‚ùå Erro ao finalizar competi√ß√£o di√°ria:', error);
    }
  }

  async getDailyCompetitionRanking(competitionId: string): Promise<ApiResponse<any[]>> {
    try {
      console.log('üìä Buscando ranking da competi√ß√£o di√°ria:', competitionId);
      
      if (!competitionId) {
        console.error('‚ùå ID da competi√ß√£o n√£o fornecido');
        return createErrorResponse('ID da competi√ß√£o √© obrigat√≥rio');
      }

      // Primeira consulta: buscar participa√ß√µes
      const { data: participations, error: participationsError } = await supabase
        .from('competition_participations')
        .select('user_position, user_score, user_id, created_at')
        .eq('competition_id', competitionId)
        .not('user_position', 'is', null)
        .order('user_position', { ascending: true })
        .limit(100);

      if (participationsError) {
        console.error('‚ùå Erro ao buscar participa√ß√µes:', participationsError);
        throw participationsError;
      }

      if (!participations || participations.length === 0) {
        console.log('üìä Nenhuma participa√ß√£o encontrada para a competi√ß√£o');
        return createSuccessResponse([]);
      }

      // Segunda consulta: buscar perfis dos usu√°rios
      const userIds = participations.map(p => p.user_id);
      const { data: profiles, error: profilesError } = await supabase
        .from('profiles')
        .select('id, username, avatar_url')
        .in('id', userIds);

      if (profilesError) {
        console.error('‚ùå Erro ao buscar perfis:', profilesError);
        throw profilesError;
      }

      // Combinar dados
      const rankingData = participations.map(participation => {
        const profile = profiles?.find(p => p.id === participation.user_id);
        return {
          ...participation,
          profiles: profile ? {
            username: profile.username,
            avatar_url: profile.avatar_url
          } : null
        };
      });

      console.log('‚úÖ Ranking da competi√ß√£o di√°ria carregado:', rankingData.length);
      return createSuccessResponse(rankingData);
    } catch (error) {
      console.error('‚ùå Erro ao carregar ranking:', error);
      return createErrorResponse(handleServiceError(error, 'GET_DAILY_COMPETITION_RANKING'));
    }
  }
}

export const dailyCompetitionService = new DailyCompetitionService();
