
import { supabase } from '@/integrations/supabase/client';
import { getDifficultyFromLength } from '@/utils/wordDifficultyUtils';

export const saveWordsToDatabase = async (
  words: string[], 
  categoryId: string, 
  categoryName: string
) => {
  console.log('üìù Iniciando salvamento de palavras:', {
    category: categoryName,
    wordsReceived: words.length,
    words: words
  });

  if (!words || words.length === 0) {
    console.log('‚ÑπÔ∏è Nenhuma palavra para salvar');
    return { words: [], count: 0 };
  }

  // Normalizar palavras (mai√∫sculas e sem espa√ßos)
  const normalizedWords = words
    .map(word => word.trim().toUpperCase())
    .filter(word => word.length >= 3 && /^[A-Z]+$/.test(word));

  console.log('üìä Palavras ap√≥s normaliza√ß√£o:', {
    category: categoryName,
    original: words.length,
    normalized: normalizedWords.length,
    normalizedWords
  });

  if (normalizedWords.length === 0) {
    console.log('‚ö†Ô∏è Nenhuma palavra v√°lida ap√≥s normaliza√ß√£o');
    return { words: [], count: 0 };
  }

  // VERIFICA√á√ÉO MELHORADA: Buscar palavras existentes APENAS nesta categoria
  console.log(`üîç Verificando palavras existentes na categoria "${categoryName}"...`);
  
  const { data: existingWords, error: checkError } = await supabase
    .from('level_words')
    .select('word, id, created_at')
    .in('word', normalizedWords)
    .eq('category', categoryName)
    .eq('is_active', true);

  if (checkError) {
    console.error('‚ùå Erro ao verificar palavras existentes:', checkError);
    throw checkError;
  }

  console.log(`üìã Palavras j√° existentes na categoria "${categoryName}":`, {
    count: existingWords?.length || 0,
    words: existingWords?.map(w => w.word) || []
  });

  // Criar um Set das palavras que j√° existem NESTA CATEGORIA
  const existingWordsSet = new Set(
    existingWords?.map(item => item.word) || []
  );

  // Filtrar apenas palavras que realmente n√£o existem NESTA CATEGORIA
  const newWords = normalizedWords.filter(word => {
    const exists = existingWordsSet.has(word);
    if (exists) {
      console.log(`‚ö†Ô∏è Palavra "${word}" j√° existe na categoria "${categoryName}" - pulando`);
    }
    return !exists;
  });

  // Remover duplicatas dentro do pr√≥prio array de palavras novas
  const uniqueNewWords = [...new Set(newWords)];

  console.log(`üìä An√°lise final para categoria "${categoryName}":`, {
    palavrasOriginais: words.length,
    palavrasNormalizadas: normalizedWords.length,
    palavrasJaExistentes: normalizedWords.length - newWords.length,
    palavrasNovasUnicas: uniqueNewWords.length,
    palavrasParaInserir: uniqueNewWords
  });

  if (uniqueNewWords.length === 0) {
    console.log(`‚ÑπÔ∏è Todas as palavras j√° existem na categoria "${categoryName}"`);
    return { words: [], count: 0 };
  }

  // Preparar palavras para inser√ß√£o com valida√ß√£o extra
  const wordsToInsert = uniqueNewWords.map(word => {
    const wordData = {
      word: word,
      category: categoryName,
      difficulty: getDifficultyFromLength(word.length),
      level: 1,
      is_active: true
    };
    
    console.log(`üéØ Preparando para inserir: "${word}" na categoria "${categoryName}" com dificuldade "${wordData.difficulty}"`);
    return wordData;
  });

  console.log('üíæ Iniciando inser√ß√£o no banco de dados...', {
    category: categoryName,
    totalToInsert: wordsToInsert.length
  });

  // INSER√á√ÉO MELHORADA: Usar upsert com melhor tratamento de erros
  const insertedWords = [];
  let successCount = 0;
  let duplicateCount = 0;
  let errorCount = 0;

  for (const [index, wordData] of wordsToInsert.entries()) {
    try {
      console.log(`üíΩ [${index + 1}/${wordsToInsert.length}] Inserindo: "${wordData.word}" na categoria "${categoryName}"`);
      
      const { data, error } = await supabase
        .from('level_words')
        .insert([wordData])
        .select()
        .single();

      if (error) {
        if (error.code === '23505') {
          // Erro de duplicata - pode ser constraint √∫nica que n√£o conhecemos
          duplicateCount++;
          console.warn(`‚ö†Ô∏è DUPLICATA detectada: "${wordData.word}" na categoria "${categoryName}" (erro ${error.code})`);
          console.warn('üîç Detalhes do erro de duplicata:', error);
        } else {
          errorCount++;
          console.error(`‚ùå Erro inesperado ao inserir "${wordData.word}":`, error);
        }
      } else {
        insertedWords.push(data);
        successCount++;
        console.log(`‚úÖ [${successCount}] Palavra inserida com sucesso: "${wordData.word}" na categoria "${categoryName}"`);
      }
    } catch (err) {
      errorCount++;
      console.error(`‚ùå Erro inesperado ao inserir palavra "${wordData.word}":`, err);
    }
  }

  // Registrar a gera√ß√£o na tabela de controle SE houve sucesso
  if (successCount > 0) {
    try {
      const { error: logError } = await supabase
        .from('ai_word_generation')
        .insert({
          category_id: categoryId,
          level: 1,
          words_generated: successCount,
          last_generation: new Date().toISOString()
        });

      if (logError) {
        console.error('‚ùå Erro ao registrar gera√ß√£o na tabela de controle:', logError);
      } else {
        console.log('üìä Gera√ß√£o registrada na tabela de controle');
      }
    } catch (logErr) {
      console.error('‚ùå Erro inesperado ao registrar gera√ß√£o:', logErr);
    }
  }

  const finalResult = {
    category: categoryName,
    totalReceived: words.length,
    normalizedWords: normalizedWords.length,
    duplicatesSkipped: duplicateCount,
    errors: errorCount,
    successfulInserts: successCount,
    insertedWords: insertedWords,
    count: successCount
  };

  console.log(`üéØ RESULTADO FINAL para categoria "${categoryName}":`, finalResult);

  return { words: insertedWords, count: successCount };
};
