
import { supabase } from '@/integrations/supabase/client';
import { competitionParticipationService } from './competitionParticipationService';
import { dailyCompetitionFinalizationService } from './dailyCompetition/dailyCompetitionFinalization';

/**
 * Servi√ßo para finaliza√ß√£o de competi√ß√µes - atualizado para nova din√¢mica
 */
class CompetitionFinalizationService {
  async finalizeDailyCompetition(competitionId: string): Promise<void> {
    try {
      console.log('üèÅ Finalizando competi√ß√£o di√°ria com nova din√¢mica...');

      // Usar o novo servi√ßo espec√≠fico para competi√ß√µes di√°rias
      await dailyCompetitionFinalizationService.finalizeDailyCompetition(competitionId);
      
      console.log('‚úÖ Competi√ß√£o di√°ria finalizada com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao finalizar competi√ß√£o di√°ria:', error);
    }
  }

  async finalizeWeeklyCompetition(competitionId: string): Promise<void> {
    try {
      console.log('üèÅ Finalizando competi√ß√£o semanal...');

      // Atualizar rankings finais
      await competitionParticipationService.updateCompetitionRankings(competitionId);

      // Finalizar a competi√ß√£o
      await supabase
        .from('custom_competitions')
        .update({ 
          status: 'completed',
          updated_at: new Date().toISOString()
        })
        .eq('id', competitionId);

      // Buscar e finalizar todas as competi√ß√µes di√°rias vinculadas
      const { data: linkedDailyCompetitions, error: linkedError } = await supabase
        .from('custom_competitions')
        .select('id')
        .eq('weekly_tournament_id', competitionId)
        .eq('status', 'active');

      if (!linkedError && linkedDailyCompetitions) {
        for (const dailyComp of linkedDailyCompetitions) {
          await this.finalizeDailyCompetition(dailyComp.id);
        }
        console.log(`‚úÖ ${linkedDailyCompetitions.length} competi√ß√µes di√°rias vinculadas finalizadas`);
      }

      console.log('‚úÖ Competi√ß√£o semanal finalizada com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao finalizar competi√ß√£o semanal:', error);
    }
  }

  private async transferPointsToWeeklyCompetition(weeklyCompetitionId: string, participations: any[]): Promise<void> {
    // Este m√©todo n√£o √© mais necess√°rio com a nova din√¢mica,
    // pois os pontos s√£o transferidos em tempo real durante o jogo
    console.log('‚ÑπÔ∏è Transfer√™ncia de pontos n√£o necess√°ria - pontos j√° transferidos em tempo real');
  }
}

export const competitionFinalizationService = new CompetitionFinalizationService();
