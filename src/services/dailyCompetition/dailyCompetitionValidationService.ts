
import { supabase } from '@/integrations/supabase/client';
import { createSuccessResponse, createErrorResponse, handleServiceError } from '@/utils/apiHelpers';
import { ApiResponse } from '@/types';
import { createBrasiliaTimestamp } from '@/utils/brasiliaTimeUnified';

export class DailyCompetitionValidationService {
  /**
   * Cria competi√ß√£o di√°ria com valida√ß√£o b√°sica
   */
  async createDailyCompetition(formData: any): Promise<ApiResponse<any>> {
    try {
      console.log('üîç Service: Criando competi√ß√£o di√°ria:', formData);
      
      // Valida√ß√£o b√°sica
      if (!formData.title || !formData.start_date) {
        throw new Error('T√≠tulo e data de in√≠cio s√£o obrigat√≥rios');
      }
      
      // Obter o usu√°rio atual
      const { data: { user } } = await supabase.auth.getUser();
      
      // Inserir no banco
      const { data, error } = await supabase
        .from('custom_competitions')
        .insert({
          ...formData,
          competition_type: 'challenge',
          created_by: user?.id
        })
        .select()
        .single();

      if (error) {
        console.error('‚ùå Service: Erro ao criar competi√ß√£o:', error);
        throw error;
      }

      console.log('üéâ Service: Competi√ß√£o di√°ria criada com sucesso:', data);
      return createSuccessResponse(data);
    } catch (error) {
      console.error('‚ùå Service: Erro na cria√ß√£o:', error);
      return createErrorResponse(handleServiceError(error, 'CREATE_DAILY_COMPETITION'));
    }
  }

  /**
   * Atualiza competi√ß√£o di√°ria
   */
  async updateDailyCompetition(competitionId: string, formData: any): Promise<ApiResponse<any>> {
    try {
      console.log('üîç Service: Atualizando competi√ß√£o di√°ria:', { competitionId, formData });
      
      // Valida√ß√£o b√°sica
      if (!formData.title || !formData.start_date) {
        throw new Error('T√≠tulo e data de in√≠cio s√£o obrigat√≥rios');
      }
      
      // Atualizar no banco
      const { data, error } = await supabase
        .from('custom_competitions')
        .update({
          ...formData,
          updated_at: createBrasiliaTimestamp(new Date().toString())
        })
        .eq('id', competitionId)
        .eq('competition_type', 'challenge')
        .select()
        .single();

      if (error) {
        console.error('‚ùå Service: Erro ao atualizar competi√ß√£o:', error);
        throw error;
      }

      if (!data) {
        throw new Error('Competi√ß√£o n√£o encontrada ou n√£o √© uma competi√ß√£o di√°ria');
      }

      console.log('üéâ Service: Competi√ß√£o di√°ria atualizada com sucesso:', data);
      return createSuccessResponse(data);
    } catch (error) {
      console.error('‚ùå Service: Erro na atualiza√ß√£o:', error);
      return createErrorResponse(handleServiceError(error, 'UPDATE_DAILY_COMPETITION'));
    }
  }

  /**
   * Verifica competi√ß√µes di√°rias b√°sicas
   */
  async validateAllDailyCompetitions(): Promise<ApiResponse<any>> {
    try {
      console.log('üîç Service: Verificando todas as competi√ß√µes di√°rias...');
      
      // Buscar todas as competi√ß√µes di√°rias
      const { data: competitions, error } = await supabase
        .from('custom_competitions')
        .select('id, title, start_date, end_date, status, prize_pool')
        .eq('competition_type', 'challenge');

      if (error) {
        throw error;
      }

      console.log(`‚úÖ Verifica√ß√£o conclu√≠da. ${competitions?.length || 0} competi√ß√µes verificadas.`);
      return createSuccessResponse({ 
        totalChecked: competitions?.length || 0, 
        competitions: competitions || [] 
      });
    } catch (error) {
      console.error('‚ùå Service: Erro na valida√ß√£o:', error);
      return createErrorResponse(handleServiceError(error, 'VALIDATE_ALL_DAILY_COMPETITIONS'));
    }
  }
}

export const dailyCompetitionValidationService = new DailyCompetitionValidationService();
