
import { supabase } from '@/integrations/supabase/client';

export class DailyCompetitionParticipationService {
  async joinCompetitionAutomatically(sessionId: string, competitions: any[]): Promise<void> {
    try {
      console.log('üéØ Inscrevendo automaticamente em competi√ß√µes di√°rias vinculadas...');

      if (!competitions || competitions.length === 0) {
        console.log('üìÖ Nenhuma competi√ß√£o di√°ria ativa encontrada');
        return;
      }

      const { data: session, error: sessionError } = await supabase
        .from('game_sessions')
        .select('user_id, competition_id')
        .eq('id', sessionId)
        .single();

      if (sessionError || !session) {
        console.error('‚ùå Erro ao buscar sess√£o:', sessionError);
        return;
      }

      if (session.competition_id) {
        console.log('‚úÖ Sess√£o j√° vinculada √† competi√ß√£o:', session.competition_id);
        return;
      }

      const targetCompetition = competitions[0];
      
      console.log('üéØ Vinculando sess√£o √† competi√ß√£o di√°ria:', targetCompetition.id);

      const { error: updateError } = await supabase
        .from('game_sessions')
        .update({ competition_id: targetCompetition.id })
        .eq('id', sessionId);

      if (updateError) {
        console.error('‚ùå Erro ao vincular sess√£o √† competi√ß√£o:', updateError);
        return;
      }

      if (targetCompetition.weekly_tournament_id) {
        await this.ensureWeeklyParticipation(session.user_id, targetCompetition.weekly_tournament_id);
      } else {
        console.error('‚ùå Competi√ß√£o di√°ria n√£o est√° vinculada a uma competi√ß√£o semanal');
        return;
      }

      console.log('‚úÖ Usu√°rio inscrito automaticamente na competi√ß√£o semanal vinculada (PARTICIPA√á√ÉO LIVRE)');
    } catch (error) {
      console.error('‚ùå Erro ao inscrever automaticamente:', error);
    }
  }

  private async ensureWeeklyParticipation(userId: string, weeklyCompetitionId: string): Promise<void> {
    try {
      console.log('üèÜ Verificando participa√ß√£o na competi√ß√£o semanal...');

      const { data: existingWeeklyParticipation, error: checkWeeklyError } = await supabase
        .from('competition_participations')
        .select('id')
        .eq('competition_id', weeklyCompetitionId)
        .eq('user_id', userId)
        .maybeSingle();

      if (checkWeeklyError && checkWeeklyError.code !== 'PGRST116') {
        console.error('‚ùå Erro ao verificar participa√ß√£o semanal:', checkWeeklyError);
        return;
      }

      if (!existingWeeklyParticipation) {
        // Participa√ß√£o livre - sem verifica√ß√£o de limites
        const { error: insertWeeklyError } = await supabase
          .from('competition_participations')
          .insert({
            competition_id: weeklyCompetitionId,
            user_id: userId,
            user_score: 0
          });

        if (insertWeeklyError) {
          console.error('‚ùå Erro ao criar participa√ß√£o na competi√ß√£o semanal:', insertWeeklyError);
          return;
        }

        console.log('‚úÖ Participa√ß√£o criada na competi√ß√£o semanal - PARTICIPA√á√ÉO LIVRE');
      } else {
        console.log('‚úÖ Usu√°rio j√° participa da competi√ß√£o semanal');
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar/criar participa√ß√£o semanal:', error);
    }
  }

  async updateParticipationScore(sessionId: string, totalScore: number): Promise<void> {
    try {
      console.log('üìä Atualizando pontua√ß√£o da sess√£o e transferindo diretamente para competi√ß√£o semanal...');

      const { data: session, error: sessionError } = await supabase
        .from('game_sessions')
        .select('user_id, competition_id, total_score')
        .eq('id', sessionId)
        .single();

      if (sessionError || !session) {
        console.error('‚ùå Erro ao buscar sess√£o:', sessionError);
        return;
      }

      const previousScore = session.total_score || 0;
      const scoreDifference = totalScore - previousScore;

      const { error: updateSessionError } = await supabase
        .from('game_sessions')
        .update({ total_score: totalScore })
        .eq('id', sessionId);

      if (updateSessionError) {
        console.error('‚ùå Erro ao atualizar pontua√ß√£o da sess√£o:', updateSessionError);
        return;
      }

      if (session.competition_id && scoreDifference > 0) {
        const { data: dailyCompetition, error: dailyCompError } = await supabase
          .from('custom_competitions')
          .select('weekly_tournament_id')
          .eq('id', session.competition_id)
          .single();

        if (!dailyCompError && dailyCompetition?.weekly_tournament_id) {
          await this.updateCompetitionScore(
            dailyCompetition.weekly_tournament_id, 
            session.user_id, 
            scoreDifference
          );
          console.log('‚úÖ Pontos transferidos diretamente para competi√ß√£o semanal');
        } else {
          console.error('‚ùå Competi√ß√£o di√°ria n√£o vinculada a uma competi√ß√£o semanal');
        }
      }

      console.log('‚úÖ Pontua√ß√£o atualizada com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar pontua√ß√£o:', error);
    }
  }

  private async updateCompetitionScore(competitionId: string, userId: string, scoreIncrease: number): Promise<void> {
    try {
      const { data: participation, error: getError } = await supabase
        .from('competition_participations')
        .select('id, user_score')
        .eq('competition_id', competitionId)
        .eq('user_id', userId)
        .single();

      if (getError) {
        console.error('‚ùå Erro ao buscar participa√ß√£o:', getError);
        return;
      }

      const newScore = (participation.user_score || 0) + scoreIncrease;

      const { error: updateError } = await supabase
        .from('competition_participations')
        .update({ user_score: newScore })
        .eq('id', participation.id);

      if (updateError) {
        console.error('‚ùå Erro ao atualizar pontua√ß√£o da competi√ß√£o:', updateError);
        return;
      }

      console.log(`‚úÖ Pontua√ß√£o atualizada na competi√ß√£o ${competitionId}: +${scoreIncrease} pontos (total: ${newScore})`);
    } catch (error) {
      console.error('‚ùå Erro ao atualizar pontua√ß√£o da competi√ß√£o:', error);
    }
  }

  async checkUserParticipation(userId: string, competitionId: string): Promise<boolean> {
    try {
      const { data, error } = await supabase
        .from('competition_participations')
        .select('id')
        .eq('user_id', userId)
        .eq('competition_id', competitionId)
        .single();

      if (error && error.code !== 'PGRST116') {
        throw error;
      }

      return !!data;
    } catch (error) {
      console.error('Error checking user participation:', error);
      return false;
    }
  }

  async createParticipation(userId: string, competitionId: string, score: number = 0): Promise<{ success: boolean; error?: string }> {
    try {
      // Participa√ß√£o livre - sem verifica√ß√£o de limite de participantes
      const { error } = await supabase
        .from('competition_participations')
        .insert({
          user_id: userId,
          competition_id: competitionId,
          user_score: score
        });

      if (error) throw error;

      console.log('‚úÖ Participa√ß√£o criada - PARTICIPA√á√ÉO LIVRE');
      return { success: true };
    } catch (error) {
      console.error('‚ùå Erro ao criar participa√ß√£o:', error);
      return {
        success: false,
        error: 'Erro ao criar participa√ß√£o'
      };
    }
  }

  async updateCompetitionRankings(competitionId: string): Promise<void> {
    try {
      console.log('üîÑ Atualizando rankings da competi√ß√£o:', competitionId);

      const { data: participations, error: participationsError } = await supabase
        .from('competition_participations')
        .select('id, user_score')
        .eq('competition_id', competitionId)
        .order('user_score', { ascending: false });

      if (participationsError) {
        console.error('‚ùå Erro ao buscar participa√ß√µes:', participationsError);
        return;
      }

      const updates = (participations || []).map((participation, index) => ({
        id: participation.id,
        user_position: index + 1
      }));

      for (const update of updates) {
        const { error: updateError } = await supabase
          .from('competition_participations')
          .update({ user_position: update.user_position })
          .eq('id', update.id);

        if (updateError) {
          console.error('‚ùå Erro ao atualizar posi√ß√£o:', updateError);
        }
      }

      console.log('‚úÖ Rankings atualizados para', updates.length, 'participantes - PARTICIPA√á√ÉO LIVRE');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar rankings:', error);
    }
  }
}

export const dailyCompetitionParticipationService = new DailyCompetitionParticipationService();
