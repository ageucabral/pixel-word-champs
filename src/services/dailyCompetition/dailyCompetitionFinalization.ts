
import { supabase } from '@/integrations/supabase/client';
import { dailyCompetitionParticipationService } from './dailyCompetitionParticipation';

export class DailyCompetitionFinalizationService {
  async finalizeDailyCompetition(competitionId: string): Promise<void> {
    try {
      console.log('üèÅ Finalizando competi√ß√£o di√°ria (nova din√¢mica - sem ranking di√°rio)...');

      // Buscar informa√ß√µes da competi√ß√£o di√°ria
      const { data: competition, error: compError } = await supabase
        .from('custom_competitions')
        .select('*, weekly_tournament_id')
        .eq('id', competitionId)
        .single();

      if (compError || !competition) {
        console.error('‚ùå Competi√ß√£o n√£o encontrada:', compError);
        return;
      }

      // Verificar se h√° competi√ß√£o semanal vinculada
      if (!competition.weekly_tournament_id) {
        console.error('‚ùå Competi√ß√£o di√°ria n√£o est√° vinculada a uma competi√ß√£o semanal');
        return;
      }

      // Como n√£o h√° ranking di√°rio separado, atualizar apenas os rankings da competi√ß√£o semanal
      await dailyCompetitionParticipationService.updateCompetitionRankings(competition.weekly_tournament_id);
      console.log('‚úÖ Rankings da competi√ß√£o semanal atualizados');

      // Finalizar a competi√ß√£o di√°ria
      await supabase
        .from('custom_competitions')
        .update({ 
          status: 'completed',
          updated_at: new Date().toISOString()
        })
        .eq('id', competitionId);

      console.log('‚úÖ Competi√ß√£o di√°ria finalizada com sucesso (pontos j√° na competi√ß√£o semanal)');
    } catch (error) {
      console.error('‚ùå Erro ao finalizar competi√ß√£o di√°ria:', error);
    }
  }

  async transferScoresToWeeklyCompetition(dailyCompetitionId: string): Promise<void> {
    try {
      console.log('‚ÑπÔ∏è Com a nova din√¢mica, n√£o h√° transfer√™ncia de pontos - os pontos j√° s√£o contabilizados diretamente na competi√ß√£o semanal');

      // Buscar competi√ß√£o di√°ria e sua vincula√ß√£o semanal para valida√ß√£o
      const { data: dailyCompetition, error: dailyError } = await supabase
        .from('custom_competitions')
        .select('weekly_tournament_id, title')
        .eq('id', dailyCompetitionId)
        .single();

      if (dailyError || !dailyCompetition?.weekly_tournament_id) {
        console.log('‚ö†Ô∏è Competi√ß√£o di√°ria n√£o vinculada a competi√ß√£o semanal');
        return;
      }

      console.log(`‚úÖ Competi√ß√£o di√°ria "${dailyCompetition.title || 'Sem t√≠tulo'}" est√° corretamente vinculada √† competi√ß√£o semanal`);
      console.log('‚ÑπÔ∏è Os pontos s√£o transferidos automaticamente em tempo real durante o jogo');
    } catch (error) {
      console.error('‚ùå Erro ao verificar vincula√ß√£o:', error);
    }
  }
}

export const dailyCompetitionFinalizationService = new DailyCompetitionFinalizationService();
