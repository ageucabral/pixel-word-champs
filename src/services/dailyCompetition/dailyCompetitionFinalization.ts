
import { supabase } from '@/integrations/supabase/client';
import { dailyCompetitionParticipationService } from './dailyCompetitionParticipation';

export class DailyCompetitionFinalizationService {
  async finalizeDailyCompetition(competitionId: string): Promise<void> {
    try {
      console.log('üèÅ Finalizando competi√ß√£o di√°ria e consolidando pontos...');

      // Buscar informa√ß√µes da competi√ß√£o di√°ria
      const { data: competition, error: compError } = await supabase
        .from('custom_competitions')
        .select('*, weekly_tournament_id')
        .eq('id', competitionId)
        .single();

      if (compError || !competition) {
        console.error('‚ùå Competi√ß√£o n√£o encontrada:', compError);
        return;
      }

      // Verificar se h√° competi√ß√£o semanal vinculada
      if (!competition.weekly_tournament_id) {
        console.warn('‚ö†Ô∏è Competi√ß√£o di√°ria n√£o est√° vinculada a uma competi√ß√£o semanal');
      }

      // Atualizar rankings finais da competi√ß√£o di√°ria
      await dailyCompetitionParticipationService.updateCompetitionRankings(competitionId);

      // Se h√° competi√ß√£o semanal vinculada, atualizar seus rankings tamb√©m
      if (competition.weekly_tournament_id) {
        await dailyCompetitionParticipationService.updateCompetitionRankings(competition.weekly_tournament_id);
        console.log('‚úÖ Rankings da competi√ß√£o semanal atualizados');
      }

      // Finalizar a competi√ß√£o di√°ria
      await supabase
        .from('custom_competitions')
        .update({ 
          status: 'completed',
          updated_at: new Date().toISOString()
        })
        .eq('id', competitionId);

      console.log('‚úÖ Competi√ß√£o di√°ria finalizada com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao finalizar competi√ß√£o di√°ria:', error);
    }
  }

  async transferScoresToWeeklyCompetition(dailyCompetitionId: string): Promise<void> {
    try {
      console.log('üîÑ Verificando transfer√™ncia de pontos para competi√ß√£o semanal...');

      // Buscar competi√ß√£o di√°ria e sua vincula√ß√£o semanal
      const { data: dailyCompetition, error: dailyError } = await supabase
        .from('custom_competitions')
        .select('weekly_tournament_id')
        .eq('id', dailyCompetitionId)
        .single();

      if (dailyError || !dailyCompetition?.weekly_tournament_id) {
        console.log('‚ö†Ô∏è Competi√ß√£o di√°ria n√£o vinculada a competi√ß√£o semanal');
        return;
      }

      // Buscar todas as participa√ß√µes da competi√ß√£o di√°ria
      const { data: dailyParticipations, error: participationsError } = await supabase
        .from('competition_participations')
        .select('user_id, user_score')
        .eq('competition_id', dailyCompetitionId)
        .gt('user_score', 0);

      if (participationsError) {
        console.error('‚ùå Erro ao buscar participa√ß√µes di√°rias:', participationsError);
        return;
      }

      console.log(`üìä Processando ${dailyParticipations?.length || 0} participa√ß√µes`);

      // Como os pontos j√° est√£o sendo transferidos em tempo real durante o jogo,
      // esta fun√ß√£o agora apenas valida a consist√™ncia
      for (const participation of dailyParticipations || []) {
        const { data: weeklyParticipation, error: weeklyError } = await supabase
          .from('competition_participations')
          .select('user_score')
          .eq('competition_id', dailyCompetition.weekly_tournament_id)
          .eq('user_id', participation.user_id)
          .single();

        if (weeklyError) {
          console.warn(`‚ö†Ô∏è Participa√ß√£o semanal n√£o encontrada para usu√°rio ${participation.user_id}`);
          continue;
        }

        console.log(`‚úÖ Usu√°rio ${participation.user_id}: ${participation.user_score} pontos di√°rios, ${weeklyParticipation.user_score} pontos semanais`);
      }

      console.log('‚úÖ Verifica√ß√£o de consist√™ncia de pontos conclu√≠da');
    } catch (error) {
      console.error('‚ùå Erro ao verificar transfer√™ncia de pontos:', error);
    }
  }
}

export const dailyCompetitionFinalizationService = new DailyCompetitionFinalizationService();
