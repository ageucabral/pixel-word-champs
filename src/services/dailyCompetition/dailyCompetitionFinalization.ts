
import { supabase } from '@/integrations/supabase/client';
import { logger } from '@/utils/logger';

export class DailyCompetitionFinalizationService {
  async finalizeDailyCompetition(competitionId: string): Promise<void> {
    try {
      logger.info('üèÅ Finalizando competi√ß√£o di√°ria independente...', { competitionId }, 'DAILY_COMPETITION_FINALIZATION');

      // Buscar informa√ß√µes da competi√ß√£o di√°ria
      const { data: competition, error: compError } = await supabase
        .from('custom_competitions')
        .select('*')
        .eq('id', competitionId)
        .single();

      if (compError || !competition) {
        logger.error('‚ùå Competi√ß√£o n√£o encontrada:', { compError }, 'DAILY_COMPETITION_FINALIZATION');
        return;
      }

      // Finalizar a competi√ß√£o di√°ria
      await supabase
        .from('custom_competitions')
        .update({ 
          status: 'completed',
          updated_at: new Date().toISOString()
        })
        .eq('id', competitionId);

      logger.info('‚úÖ Competi√ß√£o di√°ria finalizada com sucesso', {}, 'DAILY_COMPETITION_FINALIZATION');
      logger.info('‚ÑπÔ∏è Ranking semanal ser√° atualizado automaticamente baseado nas pontua√ß√µes dos perfis', {}, 'DAILY_COMPETITION_FINALIZATION');
    } catch (error) {
      logger.error('‚ùå Erro ao finalizar competi√ß√£o di√°ria:', { error }, 'DAILY_COMPETITION_FINALIZATION');
    }
  }

}

export const dailyCompetitionFinalizationService = new DailyCompetitionFinalizationService();
