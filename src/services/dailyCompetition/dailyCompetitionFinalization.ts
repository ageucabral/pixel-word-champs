
import { supabase } from '@/integrations/supabase/client';

export class DailyCompetitionFinalizationService {
  async finalizeDailyCompetition(competitionId: string): Promise<void> {
    try {
      console.log('üèÅ Finalizando competi√ß√£o di√°ria independente...');

      // Buscar informa√ß√µes da competi√ß√£o di√°ria
      const { data: competition, error: compError } = await supabase
        .from('custom_competitions')
        .select('*')
        .eq('id', competitionId)
        .single();

      if (compError || !competition) {
        console.error('‚ùå Competi√ß√£o n√£o encontrada:', compError);
        return;
      }

      // Finalizar a competi√ß√£o di√°ria
      await supabase
        .from('custom_competitions')
        .update({ 
          status: 'completed',
          updated_at: new Date().toISOString()
        })
        .eq('id', competitionId);

      console.log('‚úÖ Competi√ß√£o di√°ria finalizada com sucesso');
      console.log('‚ÑπÔ∏è Ranking semanal ser√° atualizado automaticamente baseado nas pontua√ß√µes dos perfis');
    } catch (error) {
      console.error('‚ùå Erro ao finalizar competi√ß√£o di√°ria:', error);
    }
  }

  async transferScoresToWeeklyCompetition(dailyCompetitionId: string): Promise<void> {
    try {
      console.log('‚ÑπÔ∏è Fun√ß√£o obsoleta - competi√ß√µes di√°rias agora s√£o independentes');
      console.log('‚ÑπÔ∏è Os pontos v√£o diretamente para o total_score do perfil do usu√°rio');
      console.log('‚ÑπÔ∏è O ranking semanal √© atualizado automaticamente baseado no total_score');
    } catch (error) {
      console.error('‚ùå Erro na fun√ß√£o obsoleta:', error);
    }
  }
}

export const dailyCompetitionFinalizationService = new DailyCompetitionFinalizationService();
