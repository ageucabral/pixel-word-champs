
import { supabase } from '@/integrations/supabase/client';
import { getCurrentDateISO, calculateCompetitionStatus } from '@/utils/brasiliaTime';

class CompetitionTimeService {
  /**
   * Atualiza o status das competi√ß√µes baseado no hor√°rio atual (VERS√ÉO CORRIGIDA)
   */
  async updateCompetitionStatuses() {
    try {
      console.log('üîÑ [CompetitionTimeService] Atualizando status das competi√ß√µes...');
      
      const now = getCurrentDateISO();
      console.log('‚è∞ [CompetitionTimeService] Hor√°rio atual (Bras√≠lia):', now);
      
      // Buscar todas as competi√ß√µes que podem precisar de atualiza√ß√£o
      const { data: competitions, error } = await supabase
        .from('custom_competitions')
        .select('id, title, start_date, end_date, status, competition_type')
        .neq('status', 'completed');

      if (error) {
        console.error('‚ùå [CompetitionTimeService] Erro ao buscar competi√ß√µes:', error);
        return;
      }

      if (!competitions?.length) {
        console.log('‚ÑπÔ∏è [CompetitionTimeService] Nenhuma competi√ß√£o para atualizar');
        return;
      }

      console.log(`üìã [CompetitionTimeService] Processando ${competitions.length} competi√ß√µes`);

      let updatedCount = 0;

      // Atualizar status de cada competi√ß√£o
      for (const competition of competitions) {
        const currentStatus = calculateCompetitionStatus(competition.start_date, competition.end_date);
        
        console.log(`üîç [COMP] "${competition.title}":`, {
          id: competition.id,
          type: competition.competition_type,
          statusAtual: competition.status,
          statusCalculado: currentStatus,
          startDate: competition.start_date,
          endDate: competition.end_date
        });
        
        if (currentStatus !== competition.status) {
          console.log(`üîÑ [UPDATE] Atualizando "${competition.title}": ${competition.status} ‚Üí ${currentStatus}`);
          
          const { error: updateError } = await supabase
            .from('custom_competitions')
            .update({ 
              status: currentStatus,
              updated_at: now
            })
            .eq('id', competition.id);

          if (updateError) {
            console.error(`‚ùå [UPDATE ERROR] Erro ao atualizar competi√ß√£o ${competition.id}:`, updateError);
          } else {
            console.log(`‚úÖ [UPDATED] Competi√ß√£o "${competition.title}" atualizada para: ${currentStatus}`);
            updatedCount++;
          }
        } else {
          console.log(`‚úÖ [OK] Competi√ß√£o "${competition.title}" j√° est√° com status correto: ${currentStatus}`);
        }
      }

      console.log(`‚úÖ [CompetitionTimeService] Atualiza√ß√£o conclu√≠da: ${updatedCount} competi√ß√µes atualizadas de ${competitions.length}`);
    } catch (error) {
      console.error('‚ùå [CompetitionTimeService] Erro ao atualizar status das competi√ß√µes:', error);
    }
  }

  /**
   * Verifica se uma competi√ß√£o est√° ativa no momento
   */
  isCompetitionActive(startDate: string, endDate: string): boolean {
    const status = calculateCompetitionStatus(startDate, endDate);
    const isActive = status === 'active';
    
    console.log('üîç [isCompetitionActive] Verifica√ß√£o:', {
      startDate,
      endDate,
      status,
      isActive
    });
    
    return isActive;
  }

  /**
   * Obt√©m o tempo restante para uma competi√ß√£o em segundos
   */
  getTimeRemaining(endDate: string): number {
    const now = new Date();
    const end = new Date(endDate);
    const diffMs = end.getTime() - now.getTime();
    const remainingSeconds = Math.max(0, Math.floor(diffMs / 1000));
    
    console.log('‚è±Ô∏è [getTimeRemaining] Tempo restante:', {
      endDate,
      now: now.toISOString(),
      remainingSeconds
    });
    
    return remainingSeconds;
  }

  /**
   * For√ßa atualiza√ß√£o de uma competi√ß√£o espec√≠fica
   */
  async forceUpdateCompetitionStatus(competitionId: string): Promise<boolean> {
    try {
      console.log(`üîß [forceUpdate] For√ßando atualiza√ß√£o da competi√ß√£o: ${competitionId}`);
      
      const { data: competition, error: fetchError } = await supabase
        .from('custom_competitions')
        .select('id, title, start_date, end_date, status')
        .eq('id', competitionId)
        .single();

      if (fetchError || !competition) {
        console.error('‚ùå [forceUpdate] Competi√ß√£o n√£o encontrada:', fetchError);
        return false;
      }

      const correctStatus = calculateCompetitionStatus(competition.start_date, competition.end_date);
      
      if (correctStatus !== competition.status) {
        const { error: updateError } = await supabase
          .from('custom_competitions')
          .update({ 
            status: correctStatus,
            updated_at: getCurrentDateISO()
          })
          .eq('id', competitionId);

        if (updateError) {
          console.error('‚ùå [forceUpdate] Erro ao atualizar:', updateError);
          return false;
        }

        console.log(`‚úÖ [forceUpdate] Status atualizado: ${competition.status} ‚Üí ${correctStatus}`);
        return true;
      }

      console.log('‚úÖ [forceUpdate] Status j√° est√° correto');
      return true;
    } catch (error) {
      console.error('‚ùå [forceUpdate] Erro:', error);
      return false;
    }
  }
}

export const competitionTimeService = new CompetitionTimeService();
