
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.49.10'
import { corsHeaders } from '../_shared/cors.ts'

// Inicializar cliente Supabase com configura√ß√µes espec√≠ficas para opera√ß√µes administrativas
const supabase = createClient(
  Deno.env.get('SUPABASE_URL') ?? '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    },
    global: {
      headers: {
        'Authorization': `Bearer ${Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''}`
      }
    }
  }
)

Deno.serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { userId, adminPassword, adminId } = await req.json()

    console.log('üóëÔ∏è Iniciando exclus√£o SIMPLIFICADA do usu√°rio:', { userId, adminId })

    if (!userId || !adminId) {
      throw new Error('Par√¢metros obrigat√≥rios: userId, adminId')
    }

    // Validar se o admin existe e tem permiss√µes
    console.log('üîç Verificando se admin existe...')
    const { data: adminProfile, error: adminProfileError } = await supabase
      .from('profiles')
      .select('id, username')
      .eq('id', adminId)
      .single()

    if (adminProfileError || !adminProfile) {
      console.error('‚ùå Admin n√£o encontrado:', adminProfileError?.message)
      throw new Error('Admin n√£o encontrado')
    }

    console.log('‚úÖ Admin encontrado:', adminProfile.username)

    // Verificar se o admin tem role de admin
    console.log('üîç Verificando permiss√µes de admin...')
    const { data: adminRoles, error: rolesError } = await supabase
      .from('user_roles')
      .select('role')
      .eq('user_id', adminId)
      .eq('role', 'admin')
      .single()

    if (rolesError || !adminRoles) {
      console.error('‚ùå Usu√°rio n√£o tem permiss√µes de administrador:', rolesError?.message)
      throw new Error('Usu√°rio n√£o tem permiss√µes de administrador')
    }

    console.log('‚úÖ Permiss√µes de admin validadas')

    // Verificar se n√£o √© o pr√≥prio admin tentando se deletar
    if (adminId === userId) {
      throw new Error('Voc√™ n√£o pode excluir sua pr√≥pria conta')
    }

    // Buscar dados do usu√°rio para logs
    console.log('üîç Buscando dados do usu√°rio a ser exclu√≠do...')
    const { data: userProfile } = await supabase
      .from('profiles')
      .select('username')
      .eq('id', userId)
      .single()

    console.log('üßπ Iniciando exclus√£o OTIMIZADA com CASCADE')

    // IMPORTANTE: Registrar a√ß√£o administrativa ANTES da exclus√£o
    // Isso permite rastrear quem fez a exclus√£o
    console.log('üìù Registrando a√ß√£o administrativa...')
    const { error: logError } = await supabase
      .from('admin_actions')
      .insert({
        admin_id: adminId,
        target_user_id: null, // N√£o referenciar o usu√°rio que ser√° deletado
        action_type: 'delete_user',
        details: { 
          timestamp: new Date().toISOString(),
          deleted_user_id: userId,
          username: userProfile?.username || 'Usu√°rio n√£o encontrado'
        }
      })

    if (logError) {
      console.warn('‚ö†Ô∏è Erro ao registrar log:', logError.message)
    } else {
      console.log('‚úÖ Log registrado com sucesso')
    }

    // Agora deletar o usu√°rio do auth system
    // As foreign keys CASCADE far√£o toda a limpeza automaticamente
    console.log('üóëÔ∏è Deletando usu√°rio do sistema de autentica√ß√£o...')
    console.log('üîß Configura√ß√£o do cliente:', {
      url: Deno.env.get('SUPABASE_URL') ? 'SET' : 'NOT_SET',
      serviceKey: Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ? 'SET' : 'NOT_SET',
      serviceKeyLength: Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')?.length || 0
    })

    try {
      const { data: deleteAuthData, error: deleteAuthError } = await supabase.auth.admin.deleteUser(userId)
      
      if (deleteAuthError) {
        console.error('‚ùå Erro detalhado ao deletar usu√°rio do auth:', {
          message: deleteAuthError.message,
          code: deleteAuthError.code || 'NO_CODE',
          status: deleteAuthError.status || 'NO_STATUS',
          details: deleteAuthError
        })
        throw new Error(`Erro ao deletar usu√°rio do sistema de autentica√ß√£o: ${deleteAuthError.message}`)
      }

      console.log('‚úÖ Resposta da API de auth:', deleteAuthData)
      console.log('‚úÖ Usu√°rio completamente removido do sistema')
      console.log('üßπ Todas as tabelas relacionadas foram limpas automaticamente via CASCADE')

    } catch (authDeleteError) {
      console.error('‚ùå Exce√ß√£o capturada ao deletar do auth:', {
        message: authDeleteError.message,
        name: authDeleteError.name,
        stack: authDeleteError.stack
      })
      throw new Error(`Erro cr√≠tico ao deletar usu√°rio do sistema de autentica√ß√£o: ${authDeleteError.message}`)
    }

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: 'Usu√°rio exclu√≠do completamente do sistema',
        deletedUserId: userId,
        deletedUsername: userProfile?.username,
        method: 'CASCADE_DELETE'
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      },
    )

  } catch (error) {
    console.error('‚ùå Erro na exclus√£o:', error.message)
    
    return new Response(
      JSON.stringify({ 
        error: error.message,
        success: false 
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400,
      },
    )
  }
})
