
-- ===================================
-- TESTE COMPLETO DO SISTEMA - FASE FINAL
-- ===================================

-- 1. VERIFICA√á√ÉO: Status das pol√≠ticas implementadas
SELECT 
  'üìä POL√çTICAS IMPLEMENTADAS' as categoria,
  COUNT(*) as total_politicas,
  CASE 
    WHEN COUNT(*) > 0 THEN '‚úÖ POL√çTICAS ATIVAS'
    ELSE '‚ùå NENHUMA POL√çTICA'
  END as status
FROM pg_policies 
WHERE schemaname = 'public';

-- 2. TESTE: Distribui√ß√£o de pol√≠ticas por tabela
SELECT 
  'üìã POL√çTICAS POR TABELA' as categoria,
  tablename,
  COUNT(*) as num_politicas
FROM pg_policies 
WHERE schemaname = 'public'
GROUP BY tablename
ORDER BY COUNT(*) DESC, tablename;

-- 3. TESTE: Verificar fun√ß√£o is_admin()
SELECT 
  'üîß TESTE FUN√á√ÉO is_admin()' as categoria,
  CASE 
    WHEN public.is_admin() IS NOT NULL THEN '‚úÖ FUNCIONAL'
    ELSE '‚ùå ERRO'
  END as status,
  public.is_admin() as resultado_funcao;

-- 4. TESTE: Verificar fun√ß√£o get_users_with_real_emails()
SELECT 
  'üë• TESTE FUN√á√ÉO get_users_with_real_emails()' as categoria,
  COUNT(*) as usuarios_encontrados,
  CASE 
    WHEN COUNT(*) > 0 THEN '‚úÖ DADOS ACESS√çVEIS'
    ELSE '‚ùå SEM DADOS'
  END as status
FROM public.get_users_with_real_emails();

-- 5. TESTE: Verificar acesso a tabelas cr√≠ticas
SELECT 
  'üóÑÔ∏è TESTE ACESSO PROFILES' as categoria,
  COUNT(*) as total_profiles,
  CASE 
    WHEN COUNT(*) > 0 THEN '‚úÖ ACESS√çVEL'
    ELSE '‚ùå BLOQUEADO'
  END as status
FROM public.profiles;

-- 6. TESTE: Verificar user_roles
SELECT 
  'üë§ TESTE USER_ROLES' as categoria,
  COUNT(*) as total_roles,
  CASE 
    WHEN COUNT(*) > 0 THEN '‚úÖ ACESS√çVEL'
    ELSE '‚ùå BLOQUEADO'
  END as status
FROM public.user_roles;

-- 7. TESTE: Verificar game_settings (dados p√∫blicos)
SELECT 
  '‚öôÔ∏è TESTE GAME_SETTINGS' as categoria,
  COUNT(*) as total_settings,
  CASE 
    WHEN COUNT(*) >= 0 THEN '‚úÖ ACESS√çVEL'
    ELSE '‚ùå BLOQUEADO'
  END as status
FROM public.game_settings;

-- 8. TESTE: Verificar weekly_rankings (p√∫blico)
SELECT 
  'üèÜ TESTE WEEKLY_RANKINGS' as categoria,
  COUNT(*) as total_rankings,
  CASE 
    WHEN COUNT(*) >= 0 THEN '‚úÖ ACESS√çVEL'
    ELSE '‚ùå BLOQUEADO'
  END as status
FROM public.weekly_rankings;

-- 9. RESUMO FINAL
SELECT 
  'üéØ RESUMO FINAL' as categoria,
  'Sistema RLS Padronizado Implementado' as resultado,
  'Testando todas as funcionalidades cr√≠ticas' as status;

-- 10. VERIFICA√á√ÉO: Pol√≠ticas com nomenclatura padronizada
SELECT 
  'üìù VERIFICA√á√ÉO NOMENCLATURA' as categoria,
  policyname,
  tablename
FROM pg_policies 
WHERE schemaname = 'public'
  AND (policyname LIKE '%_own_%' 
       OR policyname LIKE 'admin_%' 
       OR policyname LIKE 'select_%'
       OR policyname LIKE 'insert_%'
       OR policyname LIKE 'update_%'
       OR policyname LIKE 'manage_%')
ORDER BY tablename, policyname;
